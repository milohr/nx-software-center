This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libarchive configure 3.3.1, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/configure --with-pic --disable-shared --enable-static --disable-bsdtar --disable-bsdcat --disable-bsdcpio --with-zlib --without-bz2lib --without-iconv --without-lz4 --without-lzma --without-lzo2 --without-nettle --without-openssl --without-xml2 --without-expat --prefix=/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix --libdir=/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/lib

## --------- ##
## Platform. ##
## --------- ##

hostname = ian
uname -m = x86_64
uname -r = 4.15.0-30-generic
uname -s = Linux
uname -v = #32~16.04.1-Ubuntu SMP Thu Jul 26 20:25:39 UTC 2018

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games
PATH: /usr/local/games


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2858: checking for a BSD-compatible install
configure:2926: result: /usr/bin/install -c
configure:2937: checking whether build environment is sane
configure:2992: result: yes
configure:3143: checking for a thread-safe mkdir -p
configure:3182: result: /bin/mkdir -p
configure:3189: checking for gawk
configure:3205: found /usr/bin/gawk
configure:3216: result: gawk
configure:3227: checking whether make sets $(MAKE)
configure:3249: result: yes
configure:3278: checking whether make supports nested variables
configure:3295: result: yes
configure:3422: checking whether to enable maintainer-specific portions of Makefiles
configure:3431: result: yes
configure:3455: checking whether make supports nested variables
configure:3472: result: yes
configure:3550: checking build system type
configure:3564: result: x86_64-pc-linux-gnu
configure:3584: checking host system type
configure:3597: result: x86_64-pc-linux-gnu
configure:3696: checking for gcc
configure:3723: result: /usr/bin/cc
configure:3952: checking for C compiler version
configure:3961: /usr/bin/cc --version >&5
cc (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3972: $? = 0
configure:3961: /usr/bin/cc -v >&5
Using built-in specs.
COLLECT_GCC=/usr/bin/cc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.10' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) 
configure:3972: $? = 0
configure:3961: /usr/bin/cc -V >&5
cc: error: unrecognized command line option '-V'
cc: fatal error: no input files
compilation terminated.
configure:3972: $? = 1
configure:3961: /usr/bin/cc -qversion >&5
cc: error: unrecognized command line option '-qversion'
cc: fatal error: no input files
compilation terminated.
configure:3972: $? = 1
configure:3992: checking whether the C compiler works
configure:4014: /usr/bin/cc    conftest.c  >&5
configure:4018: $? = 0
configure:4066: result: yes
configure:4069: checking for C compiler default output file name
configure:4071: result: a.out
configure:4077: checking for suffix of executables
configure:4084: /usr/bin/cc -o conftest    conftest.c  >&5
configure:4088: $? = 0
configure:4110: result: 
configure:4132: checking whether we are cross compiling
configure:4140: /usr/bin/cc -o conftest    conftest.c  >&5
configure:4144: $? = 0
configure:4151: ./conftest
configure:4155: $? = 0
configure:4170: result: no
configure:4175: checking for suffix of object files
configure:4197: /usr/bin/cc -c   conftest.c >&5
configure:4201: $? = 0
configure:4222: result: o
configure:4226: checking whether we are using the GNU C compiler
configure:4245: /usr/bin/cc -c   conftest.c >&5
configure:4245: $? = 0
configure:4254: result: yes
configure:4263: checking whether /usr/bin/cc accepts -g
configure:4283: /usr/bin/cc -c -g  conftest.c >&5
configure:4283: $? = 0
configure:4324: result: yes
configure:4341: checking for /usr/bin/cc option to accept ISO C89
configure:4404: /usr/bin/cc  -c   conftest.c >&5
configure:4404: $? = 0
configure:4417: result: none needed
configure:4442: checking whether /usr/bin/cc understands -c and -o together
configure:4464: /usr/bin/cc -c conftest.c -o conftest2.o
configure:4467: $? = 0
configure:4464: /usr/bin/cc -c conftest.c -o conftest2.o
configure:4467: $? = 0
configure:4479: result: yes
configure:4507: checking for style of include used by make
configure:4535: result: GNU
configure:4561: checking dependency style of /usr/bin/cc
configure:4672: result: gcc3
configure:4694: checking how to run the C preprocessor
configure:4725: /usr/bin/cc -E  conftest.c
configure:4725: $? = 0
configure:4739: /usr/bin/cc -E  conftest.c
conftest.c:16:28: fatal error: ac_nonexistent.h: No such file or directory
compilation terminated.
configure:4739: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4764: result: /usr/bin/cc -E
configure:4784: /usr/bin/cc -E  conftest.c
configure:4784: $? = 0
configure:4798: /usr/bin/cc -E  conftest.c
conftest.c:16:28: fatal error: ac_nonexistent.h: No such file or directory
compilation terminated.
configure:4798: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4827: checking for grep that handles long lines and -e
configure:4885: result: /bin/grep
configure:4890: checking for egrep
configure:4952: result: /bin/grep -E
configure:4957: checking for ANSI C header files
configure:4977: /usr/bin/cc -c   conftest.c >&5
configure:4977: $? = 0
configure:5050: /usr/bin/cc -o conftest    conftest.c  >&5
configure:5050: $? = 0
configure:5050: ./conftest
configure:5050: $? = 0
configure:5061: result: yes
configure:5074: checking for sys/types.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for sys/stat.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for stdlib.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for string.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for memory.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for strings.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for inttypes.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for stdint.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5074: checking for unistd.h
configure:5074: /usr/bin/cc -c   conftest.c >&5
configure:5074: $? = 0
configure:5074: result: yes
configure:5087: checking minix/config.h usability
configure:5087: /usr/bin/cc -c   conftest.c >&5
conftest.c:59:26: fatal error: minix/config.h: No such file or directory
compilation terminated.
configure:5087: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:5087: result: no
configure:5087: checking minix/config.h presence
configure:5087: /usr/bin/cc -E  conftest.c
conftest.c:26:26: fatal error: minix/config.h: No such file or directory
compilation terminated.
configure:5087: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <minix/config.h>
configure:5087: result: no
configure:5087: checking for minix/config.h
configure:5087: result: no
configure:5108: checking whether it is safe to define __EXTENSIONS__
configure:5126: /usr/bin/cc -c   conftest.c >&5
configure:5126: $? = 0
configure:5133: result: yes
configure:5496: checking how to print strings
configure:5523: result: printf
configure:5544: checking for a sed that does not truncate output
configure:5608: result: /bin/sed
configure:5626: checking for fgrep
configure:5688: result: /bin/grep -F
configure:5723: checking for ld used by /usr/bin/cc
configure:5790: result: /usr/bin/ld
configure:5797: checking if the linker (/usr/bin/ld) is GNU ld
configure:5812: result: yes
configure:5824: checking for BSD- or MS-compatible name lister (nm)
configure:5878: result: /usr/bin/nm -B
configure:6008: checking the name lister (/usr/bin/nm -B) interface
configure:6015: /usr/bin/cc -c   conftest.c >&5
configure:6018: /usr/bin/nm -B "conftest.o"
configure:6021: output
0000000000000000 B some_variable
configure:6028: result: BSD nm
configure:6031: checking whether ln -s works
configure:6035: result: yes
configure:6043: checking the maximum length of command line arguments
configure:6174: result: 1572864
configure:6222: checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format
configure:6262: result: func_convert_file_noop
configure:6269: checking how to convert x86_64-pc-linux-gnu file names to toolchain format
configure:6289: result: func_convert_file_noop
configure:6296: checking for /usr/bin/ld option to reload object files
configure:6303: result: -r
configure:6377: checking for objdump
configure:6404: result: objdump
configure:6433: checking how to recognize dependent libraries
configure:6633: result: pass_all
configure:6718: checking for dlltool
configure:6745: result: dlltool
configure:6775: checking how to associate runtime and link libraries
configure:6802: result: printf %s\n
configure:6862: checking for ar
configure:6878: found /usr/bin/ar
configure:6889: result: ar
configure:6926: checking for archiver @FILE support
configure:6943: /usr/bin/cc -c   conftest.c >&5
configure:6943: $? = 0
configure:6946: ar cru libconftest.a @conftest.lst >&5
ar: `u' modifier ignored since `D' is the default (see `U')
configure:6949: $? = 0
configure:6954: ar cru libconftest.a @conftest.lst >&5
ar: `u' modifier ignored since `D' is the default (see `U')
ar: conftest.o: No such file or directory
configure:6957: $? = 1
configure:6969: result: @
configure:7027: checking for strip
configure:7043: found /usr/bin/strip
configure:7054: result: strip
configure:7126: checking for ranlib
configure:7142: found /usr/bin/ranlib
configure:7153: result: ranlib
configure:7255: checking command to parse /usr/bin/nm -B output from /usr/bin/cc object
configure:7408: /usr/bin/cc -c   conftest.c >&5
configure:7411: $? = 0
configure:7415: /usr/bin/nm -B conftest.o \| sed -n -e 's/^.*[ ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[ ][ ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d' \> conftest.nm
configure:7418: $? = 0
configure:7484: /usr/bin/cc -o conftest    conftest.c conftstm.o >&5
configure:7487: $? = 0
configure:7525: result: ok
configure:7572: checking for sysroot
configure:7602: result: no
configure:7609: checking for a working dd
configure:7647: result: /bin/dd
configure:7651: checking how to truncate binary pipes
configure:7666: result: /bin/dd bs=4096 count=1
configure:7802: /usr/bin/cc -c   conftest.c >&5
configure:7805: $? = 0
configure:7995: checking for mt
configure:8011: found /bin/mt
configure:8022: result: mt
configure:8045: checking if mt is a manifest tool
configure:8051: mt '-?'
configure:8059: result: no
configure:8733: checking for dlfcn.h
configure:8733: /usr/bin/cc -c   conftest.c >&5
configure:8733: $? = 0
configure:8733: result: yes
configure:8987: checking for objdir
configure:9002: result: .libs
configure:9262: checking if /usr/bin/cc supports -fno-rtti -fno-exceptions
configure:9280: /usr/bin/cc -c   -fno-rtti -fno-exceptions conftest.c >&5
cc1: warning: command line option '-fno-rtti' is valid for C++/ObjC++ but not for C
configure:9284: $? = 0
configure:9297: result: no
configure:9655: checking for /usr/bin/cc option to produce PIC
configure:9662: result: -fPIC -DPIC
configure:9670: checking if /usr/bin/cc PIC flag -fPIC -DPIC works
configure:9688: /usr/bin/cc -c   -fPIC -DPIC -DPIC conftest.c >&5
configure:9692: $? = 0
configure:9705: result: yes
configure:9734: checking if /usr/bin/cc static flag -static works
configure:9762: result: yes
configure:9777: checking if /usr/bin/cc supports -c -o file.o
configure:9798: /usr/bin/cc -c   -o out/conftest2.o conftest.c >&5
configure:9802: $? = 0
configure:9824: result: yes
configure:9832: checking if /usr/bin/cc supports -c -o file.o
configure:9879: result: yes
configure:9912: checking whether the /usr/bin/cc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries
configure:11175: result: yes
configure:11415: checking dynamic linker characteristics
configure:11996: /usr/bin/cc -o conftest    -Wl,-rpath -Wl,/foo conftest.c  >&5
configure:11996: $? = 0
configure:12245: result: GNU/Linux ld.so
configure:12367: checking how to hardcode library paths into programs
configure:12392: result: immediate
configure:12940: checking whether stripping libraries is possible
configure:12945: result: yes
configure:12980: checking if libtool supports shared libraries
configure:12982: result: yes
configure:12985: checking whether to build shared libraries
configure:13010: result: no
configure:13013: checking whether to build static libraries
configure:13017: result: yes
configure:13097: checking for strip
configure:13124: result: strip
configure:13361: checking for dirent.h that defines DIR
configure:13380: /usr/bin/cc -c   conftest.c >&5
configure:13380: $? = 0
configure:13388: result: yes
configure:13401: checking for library containing opendir
configure:13432: /usr/bin/cc -o conftest    conftest.c  >&5
configure:13432: $? = 0
configure:13449: result: none required
configure:13516: checking for sys/wait.h that is POSIX.1 compatible
configure:13542: /usr/bin/cc -c   conftest.c >&5
configure:13542: $? = 0
configure:13549: result: yes
configure:13560: checking copyfile.h usability
configure:13560: /usr/bin/cc -c   conftest.c >&5
conftest.c:68:22: fatal error: copyfile.h: No such file or directory
compilation terminated.
configure:13560: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <copyfile.h>
configure:13560: result: no
configure:13560: checking copyfile.h presence
configure:13560: /usr/bin/cc -E  conftest.c
conftest.c:35:22: fatal error: copyfile.h: No such file or directory
compilation terminated.
configure:13560: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <copyfile.h>
configure:13560: result: no
configure:13560: checking for copyfile.h
configure:13560: result: no
configure:13560: checking ctype.h usability
configure:13560: /usr/bin/cc -c   conftest.c >&5
configure:13560: $? = 0
configure:13560: result: yes
configure:13560: checking ctype.h presence
configure:13560: /usr/bin/cc -E  conftest.c
configure:13560: $? = 0
configure:13560: result: yes
configure:13560: checking for ctype.h
configure:13560: result: yes
configure:13573: checking errno.h usability
configure:13573: /usr/bin/cc -c   conftest.c >&5
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking errno.h presence
configure:13573: /usr/bin/cc -E  conftest.c
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking for errno.h
configure:13573: result: yes
configure:13573: checking ext2fs/ext2_fs.h usability
configure:13573: /usr/bin/cc -c   conftest.c >&5
conftest.c:70:28: fatal error: ext2fs/ext2_fs.h: No such file or directory
compilation terminated.
configure:13573: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ext2fs/ext2_fs.h>
configure:13573: result: no
configure:13573: checking ext2fs/ext2_fs.h presence
configure:13573: /usr/bin/cc -E  conftest.c
conftest.c:37:28: fatal error: ext2fs/ext2_fs.h: No such file or directory
compilation terminated.
configure:13573: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <ext2fs/ext2_fs.h>
configure:13573: result: no
configure:13573: checking for ext2fs/ext2_fs.h
configure:13573: result: no
configure:13573: checking fcntl.h usability
configure:13573: /usr/bin/cc -c   conftest.c >&5
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking fcntl.h presence
configure:13573: /usr/bin/cc -E  conftest.c
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking for fcntl.h
configure:13573: result: yes
configure:13573: checking grp.h usability
configure:13573: /usr/bin/cc -c   conftest.c >&5
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking grp.h presence
configure:13573: /usr/bin/cc -E  conftest.c
configure:13573: $? = 0
configure:13573: result: yes
configure:13573: checking for grp.h
configure:13573: result: yes
configure:13584: checking whether EXT2_IOC_GETFLAGS is usable
configure:13601: /usr/bin/cc -c   conftest.c >&5
conftest.c:40:28: fatal error: ext2fs/ext2_fs.h: No such file or directory
compilation terminated.
configure:13601: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
| #include <ext2fs/ext2_fs.h>
| int
| main ()
| {
| int x = EXT2_IOC_GETFLAGS
|   ;
|   return 0;
| }
configure:13608: result: no
configure:13622: checking for inttypes.h
configure:13622: result: yes
configure:13622: checking io.h usability
configure:13622: /usr/bin/cc -c   conftest.c >&5
conftest.c:73:16: fatal error: io.h: No such file or directory
compilation terminated.
configure:13622: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <io.h>
configure:13622: result: no
configure:13622: checking io.h presence
configure:13622: /usr/bin/cc -E  conftest.c
conftest.c:40:16: fatal error: io.h: No such file or directory
compilation terminated.
configure:13622: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <io.h>
configure:13622: result: no
configure:13622: checking for io.h
configure:13622: result: no
configure:13622: checking langinfo.h usability
configure:13622: /usr/bin/cc -c   conftest.c >&5
configure:13622: $? = 0
configure:13622: result: yes
configure:13622: checking langinfo.h presence
configure:13622: /usr/bin/cc -E  conftest.c
configure:13622: $? = 0
configure:13622: result: yes
configure:13622: checking for langinfo.h
configure:13622: result: yes
configure:13622: checking limits.h usability
configure:13622: /usr/bin/cc -c   conftest.c >&5
configure:13622: $? = 0
configure:13622: result: yes
configure:13622: checking limits.h presence
configure:13622: /usr/bin/cc -E  conftest.c
configure:13622: $? = 0
configure:13622: result: yes
configure:13622: checking for limits.h
configure:13622: result: yes
configure:13635: checking linux/fiemap.h usability
configure:13635: /usr/bin/cc -c   conftest.c >&5
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking linux/fiemap.h presence
configure:13635: /usr/bin/cc -E  conftest.c
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking for linux/fiemap.h
configure:13635: result: yes
configure:13635: checking linux/fs.h usability
configure:13635: /usr/bin/cc -c   conftest.c >&5
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking linux/fs.h presence
configure:13635: /usr/bin/cc -E  conftest.c
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking for linux/fs.h
configure:13635: result: yes
configure:13635: checking linux/magic.h usability
configure:13635: /usr/bin/cc -c   conftest.c >&5
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking linux/magic.h presence
configure:13635: /usr/bin/cc -E  conftest.c
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking for linux/magic.h
configure:13635: result: yes
configure:13635: checking linux/types.h usability
configure:13635: /usr/bin/cc -c   conftest.c >&5
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking linux/types.h presence
configure:13635: /usr/bin/cc -E  conftest.c
configure:13635: $? = 0
configure:13635: result: yes
configure:13635: checking for linux/types.h
configure:13635: result: yes
configure:13646: checking whether FS_IOC_GETFLAGS is usable
configure:13663: /usr/bin/cc -c   conftest.c >&5
configure:13663: $? = 0
configure:13670: result: yes
configure:13684: checking locale.h usability
configure:13684: /usr/bin/cc -c   conftest.c >&5
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking locale.h presence
configure:13684: /usr/bin/cc -E  conftest.c
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking for locale.h
configure:13684: result: yes
configure:13684: checking paths.h usability
configure:13684: /usr/bin/cc -c   conftest.c >&5
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking paths.h presence
configure:13684: /usr/bin/cc -E  conftest.c
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking for paths.h
configure:13684: result: yes
configure:13684: checking poll.h usability
configure:13684: /usr/bin/cc -c   conftest.c >&5
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking poll.h presence
configure:13684: /usr/bin/cc -E  conftest.c
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking for poll.h
configure:13684: result: yes
configure:13684: checking pthread.h usability
configure:13684: /usr/bin/cc -c   conftest.c >&5
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking pthread.h presence
configure:13684: /usr/bin/cc -E  conftest.c
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking for pthread.h
configure:13684: result: yes
configure:13684: checking pwd.h usability
configure:13684: /usr/bin/cc -c   conftest.c >&5
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking pwd.h presence
configure:13684: /usr/bin/cc -E  conftest.c
configure:13684: $? = 0
configure:13684: result: yes
configure:13684: checking for pwd.h
configure:13684: result: yes
configure:13697: checking readpassphrase.h usability
configure:13697: /usr/bin/cc -c   conftest.c >&5
conftest.c:85:28: fatal error: readpassphrase.h: No such file or directory
compilation terminated.
configure:13697: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <readpassphrase.h>
configure:13697: result: no
configure:13697: checking readpassphrase.h presence
configure:13697: /usr/bin/cc -E  conftest.c
conftest.c:52:28: fatal error: readpassphrase.h: No such file or directory
compilation terminated.
configure:13697: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| /* end confdefs.h.  */
| #include <readpassphrase.h>
configure:13697: result: no
configure:13697: checking for readpassphrase.h
configure:13697: result: no
configure:13697: checking signal.h usability
configure:13697: /usr/bin/cc -c   conftest.c >&5
configure:13697: $? = 0
configure:13697: result: yes
configure:13697: checking signal.h presence
configure:13697: /usr/bin/cc -E  conftest.c
configure:13697: $? = 0
configure:13697: result: yes
configure:13697: checking for signal.h
configure:13697: result: yes
configure:13697: checking spawn.h usability
configure:13697: /usr/bin/cc -c   conftest.c >&5
configure:13697: $? = 0
configure:13697: result: yes
configure:13697: checking spawn.h presence
configure:13697: /usr/bin/cc -E  conftest.c
configure:13697: $? = 0
configure:13697: result: yes
configure:13697: checking for spawn.h
configure:13697: result: yes
configure:13710: checking stdarg.h usability
configure:13710: /usr/bin/cc -c   conftest.c >&5
configure:13710: $? = 0
configure:13710: result: yes
configure:13710: checking stdarg.h presence
configure:13710: /usr/bin/cc -E  conftest.c
configure:13710: $? = 0
configure:13710: result: yes
configure:13710: checking for stdarg.h
configure:13710: result: yes
configure:13710: checking for stdint.h
configure:13710: result: yes
configure:13710: checking for stdlib.h
configure:13710: result: yes
configure:13710: checking for string.h
configure:13710: result: yes
configure:13723: checking sys/cdefs.h usability
configure:13723: /usr/bin/cc -c   conftest.c >&5
configure:13723: $? = 0
configure:13723: result: yes
configure:13723: checking sys/cdefs.h presence
configure:13723: /usr/bin/cc -E  conftest.c
configure:13723: $? = 0
configure:13723: result: yes
configure:13723: checking for sys/cdefs.h
configure:13723: result: yes
configure:13723: checking sys/extattr.h usability
configure:13723: /usr/bin/cc -c   conftest.c >&5
conftest.c:92:25: fatal error: sys/extattr.h: No such file or directory
compilation terminated.
configure:13723: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/extattr.h>
configure:13723: result: no
configure:13723: checking sys/extattr.h presence
configure:13723: /usr/bin/cc -E  conftest.c
conftest.c:59:25: fatal error: sys/extattr.h: No such file or directory
compilation terminated.
configure:13723: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <sys/extattr.h>
configure:13723: result: no
configure:13723: checking for sys/extattr.h
configure:13723: result: no
configure:13736: checking sys/ioctl.h usability
configure:13736: /usr/bin/cc -c   conftest.c >&5
configure:13736: $? = 0
configure:13736: result: yes
configure:13736: checking sys/ioctl.h presence
configure:13736: /usr/bin/cc -E  conftest.c
configure:13736: $? = 0
configure:13736: result: yes
configure:13736: checking for sys/ioctl.h
configure:13736: result: yes
configure:13736: checking sys/mkdev.h usability
configure:13736: /usr/bin/cc -c   conftest.c >&5
conftest.c:93:23: fatal error: sys/mkdev.h: No such file or directory
compilation terminated.
configure:13736: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/mkdev.h>
configure:13736: result: no
configure:13736: checking sys/mkdev.h presence
configure:13736: /usr/bin/cc -E  conftest.c
conftest.c:60:23: fatal error: sys/mkdev.h: No such file or directory
compilation terminated.
configure:13736: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| /* end confdefs.h.  */
| #include <sys/mkdev.h>
configure:13736: result: no
configure:13736: checking for sys/mkdev.h
configure:13736: result: no
configure:13736: checking sys/mount.h usability
configure:13736: /usr/bin/cc -c   conftest.c >&5
configure:13736: $? = 0
configure:13736: result: yes
configure:13736: checking sys/mount.h presence
configure:13736: /usr/bin/cc -E  conftest.c
configure:13736: $? = 0
configure:13736: result: yes
configure:13736: checking for sys/mount.h
configure:13736: result: yes
configure:13749: checking sys/param.h usability
configure:13749: /usr/bin/cc -c   conftest.c >&5
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking sys/param.h presence
configure:13749: /usr/bin/cc -E  conftest.c
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking for sys/param.h
configure:13749: result: yes
configure:13749: checking sys/poll.h usability
configure:13749: /usr/bin/cc -c   conftest.c >&5
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking sys/poll.h presence
configure:13749: /usr/bin/cc -E  conftest.c
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking for sys/poll.h
configure:13749: result: yes
configure:13749: checking sys/select.h usability
configure:13749: /usr/bin/cc -c   conftest.c >&5
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking sys/select.h presence
configure:13749: /usr/bin/cc -E  conftest.c
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking for sys/select.h
configure:13749: result: yes
configure:13749: checking sys/statfs.h usability
configure:13749: /usr/bin/cc -c   conftest.c >&5
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking sys/statfs.h presence
configure:13749: /usr/bin/cc -E  conftest.c
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking for sys/statfs.h
configure:13749: result: yes
configure:13749: checking sys/statvfs.h usability
configure:13749: /usr/bin/cc -c   conftest.c >&5
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking sys/statvfs.h presence
configure:13749: /usr/bin/cc -E  conftest.c
configure:13749: $? = 0
configure:13749: result: yes
configure:13749: checking for sys/statvfs.h
configure:13749: result: yes
configure:13762: checking sys/time.h usability
configure:13762: /usr/bin/cc -c   conftest.c >&5
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking sys/time.h presence
configure:13762: /usr/bin/cc -E  conftest.c
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking for sys/time.h
configure:13762: result: yes
configure:13762: checking sys/utime.h usability
configure:13762: /usr/bin/cc -c   conftest.c >&5
conftest.c:100:23: fatal error: sys/utime.h: No such file or directory
compilation terminated.
configure:13762: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/utime.h>
configure:13762: result: no
configure:13762: checking sys/utime.h presence
configure:13762: /usr/bin/cc -E  conftest.c
conftest.c:67:23: fatal error: sys/utime.h: No such file or directory
compilation terminated.
configure:13762: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| /* end confdefs.h.  */
| #include <sys/utime.h>
configure:13762: result: no
configure:13762: checking for sys/utime.h
configure:13762: result: no
configure:13762: checking sys/utsname.h usability
configure:13762: /usr/bin/cc -c   conftest.c >&5
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking sys/utsname.h presence
configure:13762: /usr/bin/cc -E  conftest.c
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking for sys/utsname.h
configure:13762: result: yes
configure:13762: checking sys/vfs.h usability
configure:13762: /usr/bin/cc -c   conftest.c >&5
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking sys/vfs.h presence
configure:13762: /usr/bin/cc -E  conftest.c
configure:13762: $? = 0
configure:13762: result: yes
configure:13762: checking for sys/vfs.h
configure:13762: result: yes
configure:13775: checking time.h usability
configure:13775: /usr/bin/cc -c   conftest.c >&5
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking time.h presence
configure:13775: /usr/bin/cc -E  conftest.c
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking for time.h
configure:13775: result: yes
configure:13775: checking for unistd.h
configure:13775: result: yes
configure:13775: checking utime.h usability
configure:13775: /usr/bin/cc -c   conftest.c >&5
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking utime.h presence
configure:13775: /usr/bin/cc -E  conftest.c
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking for utime.h
configure:13775: result: yes
configure:13775: checking wchar.h usability
configure:13775: /usr/bin/cc -c   conftest.c >&5
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking wchar.h presence
configure:13775: /usr/bin/cc -E  conftest.c
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking for wchar.h
configure:13775: result: yes
configure:13775: checking wctype.h usability
configure:13775: /usr/bin/cc -c   conftest.c >&5
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking wctype.h presence
configure:13775: /usr/bin/cc -E  conftest.c
configure:13775: $? = 0
configure:13775: result: yes
configure:13775: checking for wctype.h
configure:13775: result: yes
configure:13787: checking windows.h usability
configure:13787: /usr/bin/cc -c   conftest.c >&5
conftest.c:107:21: fatal error: windows.h: No such file or directory
compilation terminated.
configure:13787: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <windows.h>
configure:13787: result: no
configure:13787: checking windows.h presence
configure:13787: /usr/bin/cc -E  conftest.c
conftest.c:74:21: fatal error: windows.h: No such file or directory
compilation terminated.
configure:13787: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <windows.h>
configure:13787: result: no
configure:13787: checking for windows.h
configure:13787: result: no
configure:13799: checking Bcrypt.h usability
configure:13799: /usr/bin/cc -c   conftest.c >&5
conftest.c:107:20: fatal error: Bcrypt.h: No such file or directory
compilation terminated.
configure:13799: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <Bcrypt.h>
configure:13799: result: no
configure:13799: checking Bcrypt.h presence
configure:13799: /usr/bin/cc -E  conftest.c
conftest.c:74:20: fatal error: Bcrypt.h: No such file or directory
compilation terminated.
configure:13799: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <Bcrypt.h>
configure:13799: result: no
configure:13799: checking for Bcrypt.h
configure:13799: result: no
configure:13813: checking for wincrypt.h
configure:13813: /usr/bin/cc -c   conftest.c >&5
conftest.c:79:22: fatal error: wincrypt.h: No such file or directory
compilation terminated.
configure:13813: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <wincrypt.h>
configure:13813: result: no
configure:13813: checking for winioctl.h
configure:13813: /usr/bin/cc -c   conftest.c >&5
conftest.c:79:22: fatal error: winioctl.h: No such file or directory
compilation terminated.
configure:13813: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <winioctl.h>
configure:13813: result: no
configure:13839: checking zlib.h usability
configure:13839: /usr/bin/cc -c   conftest.c >&5
configure:13839: $? = 0
configure:13839: result: yes
configure:13839: checking zlib.h presence
configure:13839: /usr/bin/cc -E  conftest.c
configure:13839: $? = 0
configure:13839: result: yes
configure:13839: checking for zlib.h
configure:13839: result: yes
configure:13849: checking for inflate in -lz
configure:13874: /usr/bin/cc -o conftest    conftest.c -lz   >&5
configure:13874: $? = 0
configure:13883: result: yes
configure:15786: checking regex.h usability
configure:15786: /usr/bin/cc -c   conftest.c >&5
configure:15786: $? = 0
configure:15786: result: yes
configure:15786: checking regex.h presence
configure:15786: /usr/bin/cc -E  conftest.c
configure:15786: $? = 0
configure:15786: result: yes
configure:15786: checking for regex.h
configure:15786: result: yes
configure:15797: checking for regcomp
configure:15797: /usr/bin/cc -o conftest    conftest.c -lz  >&5
configure:15797: $? = 0
configure:15797: result: yes
configure:16067: checking whether C compiler accepts -Wall
configure:16086: /usr/bin/cc -c   -Wall  conftest.c >&5
configure:16086: $? = 0
configure:16095: result: yes
configure:16111: : CFLAGS="$CFLAGS"
configure:16114: $? = 0
configure:16067: checking whether C compiler accepts -Wformat
configure:16086: /usr/bin/cc -c  -Wall  -Wformat  conftest.c >&5
configure:16086: $? = 0
configure:16095: result: yes
configure:16111: : CFLAGS="$CFLAGS"
configure:16114: $? = 0
configure:16067: checking whether C compiler accepts -Wformat-security
configure:16086: /usr/bin/cc -c  -Wall -Wformat  -Wformat-security  conftest.c >&5
configure:16086: $? = 0
configure:16095: result: yes
configure:16111: : CFLAGS="$CFLAGS"
configure:16114: $? = 0
configure:16138: checking for an ANSI C-conforming const
configure:16204: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16204: $? = 0
configure:16211: result: yes
configure:16221: checking for uid_t in sys/types.h
configure:16240: result: yes
configure:16259: checking for mode_t
configure:16259: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16259: $? = 0
configure:16259: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:113:21: error: expected expression before ')' token
 if (sizeof ((mode_t)))
                     ^
configure:16259: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((mode_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16259: result: yes
configure:16272: checking for off_t
configure:16272: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16272: $? = 0
configure:16272: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:113:20: error: expected expression before ')' token
 if (sizeof ((off_t)))
                    ^
configure:16272: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((off_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16272: result: yes
configure:16283: checking for size_t
configure:16283: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16283: $? = 0
configure:16283: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:113:21: error: expected expression before ')' token
 if (sizeof ((size_t)))
                     ^
configure:16283: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16283: result: yes
configure:16294: checking for id_t
configure:16294: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16294: $? = 0
configure:16294: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:113:19: error: expected expression before ')' token
 if (sizeof ((id_t)))
                   ^
configure:16294: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((id_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16294: result: yes
configure:16305: checking for uintptr_t
configure:16305: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16305: $? = 0
configure:16305: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:113:24: error: expected expression before ')' token
 if (sizeof ((uintptr_t)))
                        ^
configure:16305: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintptr_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16305: result: yes
configure:16318: checking for struct tm.tm_gmtoff
configure:16318: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16318: $? = 0
configure:16318: result: yes
configure:16330: checking for struct tm.__tm_gmtoff
configure:16330: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:12: error: 'struct tm' has no member named '__tm_gmtoff'
 if (ac_aggr.__tm_gmtoff)
            ^
conftest.c:85:18: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct tm ac_aggr;
                  ^
configure:16330: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:16330: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:19: error: 'struct tm' has no member named '__tm_gmtoff'
 if (sizeof ac_aggr.__tm_gmtoff)
                   ^
conftest.c:85:18: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct tm ac_aggr;
                  ^
configure:16330: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (sizeof ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:16330: result: no
configure:16345: checking for struct statfs.f_namemax
configure:16345: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^
conftest.c:86:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16345: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:16345: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^
conftest.c:86:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16345: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (sizeof ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:16345: result: no
configure:16361: checking for struct statvfs.f_iosize
configure:16361: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:12: error: 'struct statvfs' has no member named 'f_iosize'
 if (ac_aggr.f_iosize)
            ^
conftest.c:85:23: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct statvfs ac_aggr;
                       ^
configure:16361: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main ()
| {
| static struct statvfs ac_aggr;
| if (ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16361: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:86:19: error: 'struct statvfs' has no member named 'f_iosize'
 if (sizeof ac_aggr.f_iosize)
                   ^
conftest.c:85:23: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct statvfs ac_aggr;
                       ^
configure:16361: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main ()
| {
| static struct statvfs ac_aggr;
| if (sizeof ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16361: result: no
configure:16376: checking for struct stat.st_birthtime
configure:16376: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:12: error: 'struct stat' has no member named 'st_birthtime'
 if (ac_aggr.st_birthtime)
            ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16376: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:16376: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:19: error: 'struct stat' has no member named 'st_birthtime'
 if (sizeof ac_aggr.st_birthtime)
                   ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16376: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:16376: result: no
configure:16388: checking for struct stat.st_birthtimespec.tv_nsec
configure:16388: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:12: error: 'struct stat' has no member named 'st_birthtimespec'
 if (ac_aggr.st_birthtimespec.tv_nsec)
            ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16388: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16388: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:19: error: 'struct stat' has no member named 'st_birthtimespec'
 if (sizeof ac_aggr.st_birthtimespec.tv_nsec)
                   ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16388: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16388: result: no
configure:16398: checking for struct stat.st_mtimespec.tv_nsec
configure:16398: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:12: error: 'struct stat' has no member named 'st_mtimespec'
 if (ac_aggr.st_mtimespec.tv_nsec)
            ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16398: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16398: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:115:19: error: 'struct stat' has no member named 'st_mtimespec'
 if (sizeof ac_aggr.st_mtimespec.tv_nsec)
                   ^
conftest.c:114:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16398: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16398: result: no
configure:16408: checking for struct stat.st_mtim.tv_nsec
configure:16408: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16408: $? = 0
configure:16408: result: yes
configure:16418: checking for struct stat.st_mtime_n
configure:16418: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:12: error: 'struct stat' has no member named 'st_mtime_n'
 if (ac_aggr.st_mtime_n)
            ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16418: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:16418: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:19: error: 'struct stat' has no member named 'st_mtime_n'
 if (sizeof ac_aggr.st_mtime_n)
                   ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16418: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:16418: result: no
configure:16428: checking for struct stat.st_umtime
configure:16428: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:12: error: 'struct stat' has no member named 'st_umtime'
 if (ac_aggr.st_umtime)
            ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16428: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:16428: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:19: error: 'struct stat' has no member named 'st_umtime'
 if (sizeof ac_aggr.st_umtime)
                   ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16428: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:16428: result: no
configure:16438: checking for struct stat.st_mtime_usec
configure:16438: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:12: error: 'struct stat' has no member named 'st_mtime_usec'
 if (ac_aggr.st_mtime_usec)
            ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16438: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:16438: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:19: error: 'struct stat' has no member named 'st_mtime_usec'
 if (sizeof ac_aggr.st_mtime_usec)
                   ^
conftest.c:115:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16438: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:16438: result: no
configure:16449: checking for struct stat.st_blksize
configure:16449: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16449: $? = 0
configure:16449: result: yes
configure:16460: checking for struct stat.st_flags
configure:16460: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:117:12: error: 'struct stat' has no member named 'st_flags'
 if (ac_aggr.st_flags)
            ^
conftest.c:116:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16460: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:16460: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:117:19: error: 'struct stat' has no member named 'st_flags'
 if (sizeof ac_aggr.st_flags)
                   ^
conftest.c:116:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^
configure:16460: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:16460: result: no
configure:16474: checking for uintmax_t
configure:16474: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16474: $? = 0
configure:16474: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:24: error: expected expression before ')' token
 if (sizeof ((uintmax_t)))
                        ^
configure:16474: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16474: result: yes
configure:16483: checking for unsigned long long
configure:16483: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16483: $? = 0
configure:16483: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:117:33: error: expected expression before ')' token
 if (sizeof ((unsigned long long)))
                                 ^
configure:16483: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((unsigned long long)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16483: result: yes
configure:16497: checking for unsigned long long int
configure:16536: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:16536: $? = 0
configure:16545: result: yes
configure:16555: checking for long long int
configure:16593: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:16593: $? = 0
configure:16593: ./conftest
configure:16593: $? = 0
configure:16605: result: yes
configure:16615: checking for intmax_t
configure:16615: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16615: $? = 0
configure:16615: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:120:23: error: expected expression before ')' token
 if (sizeof ((intmax_t)))
                       ^
configure:16615: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((intmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16615: result: yes
configure:16634: checking for uintmax_t
configure:16634: result: yes
configure:16651: checking for int64_t
configure:16651: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16651: $? = 0
configure:16651: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:124:53: warning: integer overflow in expression [-Woverflow]
    < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
                                                     ^
conftest.c:123:12: error: storage size of 'test_array' isn't constant
 static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
            ^
conftest.c:123:12: warning: unused variable 'test_array' [-Wunused-variable]
configure:16651: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 64 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:16651: result: yes
configure:16662: checking for uint64_t
configure:16662: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16662: $? = 0
configure:16662: result: yes
configure:16676: checking for int32_t
configure:16676: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16676: $? = 0
configure:16676: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:124:53: warning: integer overflow in expression [-Woverflow]
    < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
                                                     ^
conftest.c:123:12: error: storage size of 'test_array' isn't constant
 static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
            ^
conftest.c:123:12: warning: unused variable 'test_array' [-Wunused-variable]
configure:16676: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 32 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:16676: result: yes
configure:16687: checking for uint32_t
configure:16687: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16687: $? = 0
configure:16687: result: yes
configure:16701: checking for int16_t
configure:16701: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16701: $? = 0
configure:16701: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:123:12: error: size of array 'test_array' is negative
 static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
            ^
configure:16701: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 16 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:16701: result: yes
configure:16712: checking for uint16_t
configure:16712: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16712: $? = 0
configure:16712: result: yes
configure:16724: checking for uint8_t
configure:16724: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16724: $? = 0
configure:16724: result: yes
configure:16739: checking whether SIZE_MAX is declared
configure:16739: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16739: $? = 0
configure:16739: result: yes
configure:16749: checking whether INT32_MAX is declared
configure:16749: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16749: $? = 0
configure:16749: result: yes
configure:16759: checking whether INT32_MIN is declared
configure:16759: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16759: $? = 0
configure:16759: result: yes
configure:16770: checking whether INT64_MAX is declared
configure:16770: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16770: $? = 0
configure:16770: result: yes
configure:16780: checking whether INT64_MIN is declared
configure:16780: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16780: $? = 0
configure:16780: result: yes
configure:16790: checking whether UINT64_MAX is declared
configure:16790: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16790: $? = 0
configure:16790: result: yes
configure:16800: checking whether UINT32_MAX is declared
configure:16800: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16800: $? = 0
configure:16800: result: yes
configure:16811: checking whether INTMAX_MAX is declared
configure:16811: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16811: $? = 0
configure:16811: result: yes
configure:16821: checking whether INTMAX_MIN is declared
configure:16821: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16821: $? = 0
configure:16821: result: yes
configure:16831: checking whether UINTMAX_MAX is declared
configure:16831: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16831: $? = 0
configure:16831: result: yes
configure:16843: checking whether SSIZE_MAX is declared
configure:16843: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16843: $? = 0
configure:16843: result: yes
configure:16852: checking whether EFTYPE is declared
configure:16852: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:106:10: error: 'EFTYPE' undeclared (first use in this function)
   (void) EFTYPE;
          ^
conftest.c:106:10: note: each undeclared identifier is reported only once for each function it appears in
configure:16852: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| /* end confdefs.h.  */
| #include <errno.h>
| 
| int
| main ()
| {
| #ifndef EFTYPE
| #ifdef __cplusplus
|   (void) EFTYPE;
| #else
|   (void) EFTYPE;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:16852: result: no
configure:16860: checking whether EILSEQ is declared
configure:16860: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16860: $? = 0
configure:16860: result: yes
configure:16868: checking for wchar_t
configure:16868: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16868: $? = 0
configure:16868: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:134:22: error: expected expression before ')' token
 if (sizeof ((wchar_t)))
                      ^
configure:16868: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((wchar_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16868: result: yes
configure:16878: checking size of wchar_t
configure:16883: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:16883: $? = 0
configure:16883: ./conftest
configure:16883: $? = 0
configure:16897: result: 4
configure:16910: checking whether time.h and sys/time.h may both be included
configure:16930: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:16930: $? = 0
configure:16937: result: yes
configure:16948: checking whether /usr/bin/cc needs -traditional
configure:16982: result: no
configure:16989: checking whether sys/types.h defines makedev
configure:17005: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17005: $? = 0
configure:17014: result: yes
configure:17039: checking for _LARGEFILE_SOURCE value needed for large files
configure:17058: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17058: $? = 0
configure:17086: result: no
configure:17107: checking for working memcmp
configure:17150: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17150: $? = 0
configure:17150: ./conftest
configure:17150: $? = 0
configure:17160: result: yes
configure:17169: checking whether lstat correctly handles trailing slash
configure:17195: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17195: $? = 0
configure:17195: ./conftest
configure:17195: $? = 0
configure:17212: result: yes
configure:17231: checking whether lstat accepts an empty string
configure:17251: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17251: $? = 0
configure:17251: ./conftest
configure:17251: $? = 0
configure:17261: result: no
configure:17277: checking whether stat accepts an empty string
configure:17297: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17297: $? = 0
configure:17297: ./conftest
configure:17297: $? = 0
configure:17307: result: no
configure:17323: checking whether strerror_r is declared
configure:17323: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:17323: $? = 0
configure:17323: result: yes
configure:17336: checking for strerror_r
configure:17336: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17336: $? = 0
configure:17336: result: yes
configure:17345: checking whether strerror_r returns char *
configure:17369: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:17369: $? = 0
configure:17407: result: yes
configure:17417: checking for strftime
configure:17417: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:129:6: warning: conflicting types for built-in function 'strftime'
 char strftime ();
      ^
configure:17417: $? = 0
configure:17417: result: yes
configure:17472: checking for vprintf
configure:17472: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:130:6: warning: conflicting types for built-in function 'vprintf'
 char vprintf ();
      ^
configure:17472: $? = 0
configure:17472: result: yes
configure:17478: checking for _doprnt
configure:17478: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccxxXXqT.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_doprnt'
collect2: error: ld returned 1 exit status
configure:17478: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define _doprnt to an innocuous variant, in case <limits.h> declares _doprnt.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _doprnt innocuous__doprnt
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _doprnt (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _doprnt
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _doprnt ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__doprnt || defined __stub____doprnt
| choke me
| #endif
| 
| int
| main ()
| {
| return _doprnt ();
|   ;
|   return 0;
| }
configure:17478: result: no
configure:17493: checking for CreateHardLinkA
configure:17528: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:117:16: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'CreateHardLinkA'
 char __stdcall CreateHardLinkA ( const char *, const char *, void * );
                ^
conftest.c: In function 'main':
conftest.c:129:5: error: 'CreateHardLinkA' undeclared (first use in this function)
 f = CreateHardLinkA;
     ^
conftest.c:129:5: note: each undeclared identifier is reported only once for each function it appears in
configure:17528: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char __stdcall CreateHardLinkA ( const char *, const char *, void * ) below.  */
| #include <assert.h>
| /* Override any gcc2 internal prototype to avoid an error.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| /* We use char because int might match the return type of a gcc2
|    builtin and then its argument prototype would still apply.  */
| char __stdcall CreateHardLinkA ( const char *, const char *, void * );
| char (*f) ( const char *, const char *, void * );
| 
| int
| main ()
| {
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined (__stub_CreateHardLinkA) || defined (__stub___CreateHardLinkA)
| choke me
| #else
| f = CreateHardLinkA;
| #endif
| 
|   ;
|   return 0;
| }
configure:17536: result: no
configure:17544: checking for arc4random_buf
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccu6JvuX.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `arc4random_buf'
collect2: error: ld returned 1 exit status
configure:17544: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define arc4random_buf to an innocuous variant, in case <limits.h> declares arc4random_buf.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define arc4random_buf innocuous_arc4random_buf
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char arc4random_buf (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef arc4random_buf
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char arc4random_buf ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_arc4random_buf || defined __stub___arc4random_buf
| choke me
| #endif
| 
| int
| main ()
| {
| return arc4random_buf ();
|   ;
|   return 0;
| }
configure:17544: result: no
configure:17544: checking for chflags
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:136:1: error: unknown type name 'choke'
 choke me
 ^
conftest.c:139:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^
configure:17544: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define chflags to an innocuous variant, in case <limits.h> declares chflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define chflags innocuous_chflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char chflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef chflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char chflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_chflags || defined __stub___chflags
| choke me
| #endif
| 
| int
| main ()
| {
| return chflags ();
|   ;
|   return 0;
| }
configure:17544: result: no
configure:17544: checking for chown
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17544: $? = 0
configure:17544: result: yes
configure:17544: checking for chroot
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17544: $? = 0
configure:17544: result: yes
configure:17544: checking for ctime_r
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17544: $? = 0
configure:17544: result: yes
configure:17544: checking for dirfd
configure:17544: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17544: $? = 0
configure:17544: result: yes
configure:17556: checking for fchdir
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17556: $? = 0
configure:17556: result: yes
configure:17556: checking for fchflags
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:141:1: error: unknown type name 'choke'
 choke me
 ^
conftest.c:144:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^
configure:17556: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| /* end confdefs.h.  */
| /* Define fchflags to an innocuous variant, in case <limits.h> declares fchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchflags innocuous_fchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchflags || defined __stub___fchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return fchflags ();
|   ;
|   return 0;
| }
configure:17556: result: no
configure:17556: checking for fchmod
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17556: $? = 0
configure:17556: result: yes
configure:17556: checking for fchown
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17556: $? = 0
configure:17556: result: yes
configure:17556: checking for fcntl
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17556: $? = 0
configure:17556: result: yes
configure:17556: checking for fdopendir
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17556: $? = 0
configure:17556: result: yes
configure:17556: checking for fork
configure:17556: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:140:6: warning: conflicting types for built-in function 'fork'
 char fork ();
      ^
configure:17556: $? = 0
configure:17556: result: yes
configure:17568: checking for fstat
configure:17568: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17568: $? = 0
configure:17568: result: yes
configure:17568: checking for fstatat
configure:17568: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17568: $? = 0
configure:17568: result: yes
configure:17568: checking for fstatfs
configure:17568: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17568: $? = 0
configure:17568: result: yes
configure:17568: checking for fstatvfs
configure:17568: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17568: $? = 0
configure:17568: result: yes
configure:17568: checking for ftruncate
configure:17568: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17568: $? = 0
configure:17568: result: yes
configure:17580: checking for futimens
configure:17580: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17580: $? = 0
configure:17580: result: yes
configure:17580: checking for futimes
configure:17580: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17580: $? = 0
configure:17580: result: yes
configure:17580: checking for futimesat
configure:17580: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17580: $? = 0
configure:17580: result: yes
configure:17592: checking for geteuid
configure:17592: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17592: $? = 0
configure:17592: result: yes
configure:17592: checking for getpid
configure:17592: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17592: $? = 0
configure:17592: result: yes
configure:17592: checking for getgrgid_r
configure:17592: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17592: $? = 0
configure:17592: result: yes
configure:17592: checking for getgrnam_r
configure:17592: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17592: $? = 0
configure:17592: result: yes
configure:17604: checking for getpwnam_r
configure:17604: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17604: $? = 0
configure:17604: result: yes
configure:17604: checking for getpwuid_r
configure:17604: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17604: $? = 0
configure:17604: result: yes
configure:17604: checking for getvfsbyname
configure:17604: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccfXpKwf.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `getvfsbyname'
collect2: error: ld returned 1 exit status
configure:17604: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| /* end confdefs.h.  */
| /* Define getvfsbyname to an innocuous variant, in case <limits.h> declares getvfsbyname.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getvfsbyname innocuous_getvfsbyname
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getvfsbyname (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getvfsbyname
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getvfsbyname ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getvfsbyname || defined __stub___getvfsbyname
| choke me
| #endif
| 
| int
| main ()
| {
| return getvfsbyname ();
|   ;
|   return 0;
| }
configure:17604: result: no
configure:17604: checking for gmtime_r
configure:17604: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17604: $? = 0
configure:17604: result: yes
configure:17616: checking for lchflags
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc12KKOn.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `lchflags'
collect2: error: ld returned 1 exit status
configure:17616: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| /* end confdefs.h.  */
| /* Define lchflags to an innocuous variant, in case <limits.h> declares lchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchflags innocuous_lchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchflags || defined __stub___lchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return lchflags ();
|   ;
|   return 0;
| }
configure:17616: result: no
configure:17616: checking for lchmod
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:161:1: error: unknown type name 'choke'
 choke me
 ^
conftest.c:164:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^
configure:17616: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| /* end confdefs.h.  */
| /* Define lchmod to an innocuous variant, in case <limits.h> declares lchmod.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchmod innocuous_lchmod
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchmod (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchmod
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchmod ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchmod || defined __stub___lchmod
| choke me
| #endif
| 
| int
| main ()
| {
| return lchmod ();
|   ;
|   return 0;
| }
configure:17616: result: no
configure:17616: checking for lchown
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17616: $? = 0
configure:17616: result: yes
configure:17616: checking for link
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17616: $? = 0
configure:17616: result: yes
configure:17616: checking for localtime_r
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17616: $? = 0
configure:17616: result: yes
configure:17616: checking for lstat
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17616: $? = 0
configure:17616: result: yes
configure:17616: checking for lutimes
configure:17616: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17616: $? = 0
configure:17616: result: yes
configure:17628: checking for mbrtowc
configure:17628: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17628: $? = 0
configure:17628: result: yes
configure:17628: checking for memmove
configure:17628: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:162:6: warning: conflicting types for built-in function 'memmove'
 char memmove ();
      ^
configure:17628: $? = 0
configure:17628: result: yes
configure:17628: checking for memset
configure:17628: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:163:6: warning: conflicting types for built-in function 'memset'
 char memset ();
      ^
configure:17628: $? = 0
configure:17628: result: yes
configure:17640: checking for mkdir
configure:17640: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17640: $? = 0
configure:17640: result: yes
configure:17640: checking for mkfifo
configure:17640: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17640: $? = 0
configure:17640: result: yes
configure:17640: checking for mknod
configure:17640: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17640: $? = 0
configure:17640: result: yes
configure:17640: checking for mkstemp
configure:17640: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17640: $? = 0
configure:17640: result: yes
configure:17652: checking for nl_langinfo
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for openat
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for pipe
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for poll
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for posix_spawnp
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for readlink
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17652: checking for readlinkat
configure:17652: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17652: $? = 0
configure:17652: result: yes
configure:17663: checking for readpassphrase
configure:17663: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc8HrZ2k.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `readpassphrase'
collect2: error: ld returned 1 exit status
configure:17663: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| /* end confdefs.h.  */
| /* Define readpassphrase to an innocuous variant, in case <limits.h> declares readpassphrase.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define readpassphrase innocuous_readpassphrase
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char readpassphrase (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef readpassphrase
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char readpassphrase ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_readpassphrase || defined __stub___readpassphrase
| choke me
| #endif
| 
| int
| main ()
| {
| return readpassphrase ();
|   ;
|   return 0;
| }
configure:17663: result: no
configure:17675: checking for select
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17675: checking for setenv
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17675: checking for setlocale
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17675: checking for sigaction
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17675: checking for statfs
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17675: checking for statvfs
configure:17675: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17675: $? = 0
configure:17675: result: yes
configure:17687: checking for strchr
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:181:6: warning: conflicting types for built-in function 'strchr'
 char strchr ();
      ^
configure:17687: $? = 0
configure:17687: result: yes
configure:17687: checking for strdup
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:182:6: warning: conflicting types for built-in function 'strdup'
 char strdup ();
      ^
configure:17687: $? = 0
configure:17687: result: yes
configure:17687: checking for strerror
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17687: $? = 0
configure:17687: result: yes
configure:17687: checking for strncpy_s
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccKaGkFV.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `strncpy_s'
collect2: error: ld returned 1 exit status
configure:17687: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| /* end confdefs.h.  */
| /* Define strncpy_s to an innocuous variant, in case <limits.h> declares strncpy_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define strncpy_s innocuous_strncpy_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char strncpy_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef strncpy_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char strncpy_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_strncpy_s || defined __stub___strncpy_s
| choke me
| #endif
| 
| int
| main ()
| {
| return strncpy_s ();
|   ;
|   return 0;
| }
configure:17687: result: no
configure:17687: checking for strrchr
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
conftest.c:184:6: warning: conflicting types for built-in function 'strrchr'
 char strrchr ();
      ^
configure:17687: $? = 0
configure:17687: result: yes
configure:17687: checking for symlink
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17687: $? = 0
configure:17687: result: yes
configure:17687: checking for timegm
configure:17687: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17687: $? = 0
configure:17687: result: yes
configure:17699: checking for tzset
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17699: checking for unsetenv
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17699: checking for utime
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17699: checking for utimensat
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17699: checking for utimes
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17699: checking for vfork
configure:17699: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17699: $? = 0
configure:17699: result: yes
configure:17711: checking for wcrtomb
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wcscmp
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wcscpy
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wcslen
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wctomb
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wmemcmp
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wmemcpy
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17711: checking for wmemmove
configure:17711: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17711: $? = 0
configure:17711: result: yes
configure:17723: checking for _ctime64_s
configure:17723: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc6QMWsM.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_ctime64_s'
collect2: error: ld returned 1 exit status
configure:17723: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _ctime64_s to an innocuous variant, in case <limits.h> declares _ctime64_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _ctime64_s innocuous__ctime64_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _ctime64_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _ctime64_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _ctime64_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__ctime64_s || defined __stub____ctime64_s
| choke me
| #endif
| 
| int
| main ()
| {
| return _ctime64_s ();
|   ;
|   return 0;
| }
configure:17723: result: no
configure:17723: checking for _fseeki64
configure:17723: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccPQCpCP.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_fseeki64'
collect2: error: ld returned 1 exit status
configure:17723: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _fseeki64 to an innocuous variant, in case <limits.h> declares _fseeki64.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _fseeki64 innocuous__fseeki64
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _fseeki64 (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _fseeki64
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _fseeki64 ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__fseeki64 || defined __stub____fseeki64
| choke me
| #endif
| 
| int
| main ()
| {
| return _fseeki64 ();
|   ;
|   return 0;
| }
configure:17723: result: no
configure:17735: checking for _get_timezone
configure:17735: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccClDNhR.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_get_timezone'
collect2: error: ld returned 1 exit status
configure:17735: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _get_timezone to an innocuous variant, in case <limits.h> declares _get_timezone.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _get_timezone innocuous__get_timezone
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _get_timezone (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _get_timezone
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _get_timezone ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__get_timezone || defined __stub____get_timezone
| choke me
| #endif
| 
| int
| main ()
| {
| return _get_timezone ();
|   ;
|   return 0;
| }
configure:17735: result: no
configure:17735: checking for _localtime64_s
configure:17735: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cczmQQCW.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_localtime64_s'
collect2: error: ld returned 1 exit status
configure:17735: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _localtime64_s to an innocuous variant, in case <limits.h> declares _localtime64_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _localtime64_s innocuous__localtime64_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _localtime64_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _localtime64_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _localtime64_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__localtime64_s || defined __stub____localtime64_s
| choke me
| #endif
| 
| int
| main ()
| {
| return _localtime64_s ();
|   ;
|   return 0;
| }
configure:17735: result: no
configure:17735: checking for _mkgmtime64
configure:17735: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc2HbQKZ.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `_mkgmtime64'
collect2: error: ld returned 1 exit status
configure:17735: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _mkgmtime64 to an innocuous variant, in case <limits.h> declares _mkgmtime64.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _mkgmtime64 innocuous__mkgmtime64
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _mkgmtime64 (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _mkgmtime64
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _mkgmtime64 ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__mkgmtime64 || defined __stub____mkgmtime64
| choke me
| #endif
| 
| int
| main ()
| {
| return _mkgmtime64 ();
|   ;
|   return 0;
| }
configure:17735: result: no
configure:17747: checking for cygwin_conv_path
configure:17747: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccd03G90.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `cygwin_conv_path'
collect2: error: ld returned 1 exit status
configure:17747: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define cygwin_conv_path to an innocuous variant, in case <limits.h> declares cygwin_conv_path.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define cygwin_conv_path innocuous_cygwin_conv_path
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char cygwin_conv_path (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef cygwin_conv_path
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cygwin_conv_path ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_cygwin_conv_path || defined __stub___cygwin_conv_path
| choke me
| #endif
| 
| int
| main ()
| {
| return cygwin_conv_path ();
|   ;
|   return 0;
| }
configure:17747: result: no
configure:17758: checking for struct vfsconf
configure:17758: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:187:13: error: invalid application of 'sizeof' to incomplete type 'struct vfsconf'
 if (sizeof (struct vfsconf))
             ^
configure:17758: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main ()
| {
| if (sizeof (struct vfsconf))
| 	 return 0;
|   ;
|   return 0;
| }
configure:17758: result: no
configure:17774: checking for struct xvfsconf
configure:17774: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:187:13: error: invalid application of 'sizeof' to incomplete type 'struct xvfsconf'
 if (sizeof (struct xvfsconf))
             ^
configure:17774: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main ()
| {
| if (sizeof (struct xvfsconf))
| 	 return 0;
|   ;
|   return 0;
| }
configure:17774: result: no
configure:17804: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:183:13: warning: 'dir' is used uninitialized in this function [-Wuninitialized]
       return(readdir_r(dir, &e, &r));
             ^
configure:17804: $? = 0
configure:17815: checking whether D_MD_ORDER is declared
configure:17815: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:191:10: error: 'D_MD_ORDER' undeclared (first use in this function)
   (void) D_MD_ORDER;
          ^
conftest.c:191:10: note: each undeclared identifier is reported only once for each function it appears in
configure:17815: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| /* end confdefs.h.  */
| #if HAVE_LANGINFO_H
| #include <langinfo.h>
| #endif
| 
| 
| int
| main ()
| {
| #ifndef D_MD_ORDER
| #ifdef __cplusplus
|   (void) D_MD_ORDER;
| #else
|   (void) D_MD_ORDER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:17815: result: no
configure:17830: checking for struct dirent.d_namlen
configure:17830: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:188:12: error: 'struct dirent' has no member named 'd_namlen'
 if (ac_aggr.d_namlen)
            ^
conftest.c:187:22: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct dirent ac_aggr;
                      ^
configure:17830: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:17830: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:188:19: error: 'struct dirent' has no member named 'd_namlen'
 if (sizeof ac_aggr.d_namlen)
                   ^
conftest.c:187:22: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct dirent ac_aggr;
                      ^
configure:17830: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (sizeof ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:17830: result: no
configure:17850: checking attr/xattr.h usability
configure:17850: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:212:24: fatal error: attr/xattr.h: No such file or directory
compilation terminated.
configure:17850: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <attr/xattr.h>
configure:17850: result: no
configure:17850: checking attr/xattr.h presence
configure:17850: /usr/bin/cc -E  conftest.c
conftest.c:179:24: fatal error: attr/xattr.h: No such file or directory
compilation terminated.
configure:17850: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| /* end confdefs.h.  */
| #include <attr/xattr.h>
configure:17850: result: no
configure:17850: checking for attr/xattr.h
configure:17850: result: no
configure:17863: checking sys/xattr.h usability
configure:17863: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:17863: $? = 0
configure:17863: result: yes
configure:17863: checking sys/xattr.h presence
configure:17863: /usr/bin/cc -E  conftest.c
configure:17863: $? = 0
configure:17863: result: yes
configure:17863: checking for sys/xattr.h
configure:17863: result: yes
configure:17863: checking sys/ea.h usability
configure:17863: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:213:20: fatal error: sys/ea.h: No such file or directory
compilation terminated.
configure:17863: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/ea.h>
configure:17863: result: no
configure:17863: checking sys/ea.h presence
configure:17863: /usr/bin/cc -E  conftest.c
conftest.c:180:20: fatal error: sys/ea.h: No such file or directory
compilation terminated.
configure:17863: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| #include <sys/ea.h>
configure:17863: result: no
configure:17863: checking for sys/ea.h
configure:17863: result: no
configure:17873: checking for library containing setxattr
configure:17904: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17904: $? = 0
configure:17921: result: none required
configure:17932: checking for extattr_get_file
configure:17932: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccau39Rl.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `extattr_get_file'
collect2: error: ld returned 1 exit status
configure:17932: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| /* Define extattr_get_file to an innocuous variant, in case <limits.h> declares extattr_get_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_get_file innocuous_extattr_get_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_get_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_get_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_get_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_get_file || defined __stub___extattr_get_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_get_file ();
|   ;
|   return 0;
| }
configure:17932: result: no
configure:17932: checking for extattr_list_file
configure:17932: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccjzI6xn.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `extattr_list_file'
collect2: error: ld returned 1 exit status
configure:17932: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| /* Define extattr_list_file to an innocuous variant, in case <limits.h> declares extattr_list_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_list_file innocuous_extattr_list_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_list_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_list_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_list_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_list_file || defined __stub___extattr_list_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_list_file ();
|   ;
|   return 0;
| }
configure:17932: result: no
configure:17944: checking for extattr_set_fd
configure:17944: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc5WEJ0s.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `extattr_set_fd'
collect2: error: ld returned 1 exit status
configure:17944: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| /* Define extattr_set_fd to an innocuous variant, in case <limits.h> declares extattr_set_fd.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_set_fd innocuous_extattr_set_fd
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_set_fd (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_set_fd
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_set_fd ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_set_fd || defined __stub___extattr_set_fd
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_set_fd ();
|   ;
|   return 0;
| }
configure:17944: result: no
configure:17944: checking for extattr_set_file
configure:17944: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc2Fp0mv.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `extattr_set_file'
collect2: error: ld returned 1 exit status
configure:17944: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| /* end confdefs.h.  */
| /* Define extattr_set_file to an innocuous variant, in case <limits.h> declares extattr_set_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_set_file innocuous_extattr_set_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_set_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_set_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_set_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_set_file || defined __stub___extattr_set_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_set_file ();
|   ;
|   return 0;
| }
configure:17944: result: no
configure:17956: checking for fgetxattr
configure:17956: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17956: $? = 0
configure:17956: result: yes
configure:17956: checking for flistxattr
configure:17956: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17956: $? = 0
configure:17956: result: yes
configure:17956: checking for fsetxattr
configure:17956: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17956: $? = 0
configure:17956: result: yes
configure:17956: checking for getxattr
configure:17956: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17956: $? = 0
configure:17956: result: yes
configure:17968: checking for lgetxattr
configure:17968: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17968: $? = 0
configure:17968: result: yes
configure:17968: checking for listxattr
configure:17968: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17968: $? = 0
configure:17968: result: yes
configure:17968: checking for llistxattr
configure:17968: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17968: $? = 0
configure:17968: result: yes
configure:17968: checking for lsetxattr
configure:17968: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
configure:17968: $? = 0
configure:17968: result: yes
configure:17980: checking for fgetea
configure:17980: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cccYlXGY.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `fgetea'
collect2: error: ld returned 1 exit status
configure:17980: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define fgetea to an innocuous variant, in case <limits.h> declares fgetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fgetea innocuous_fgetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fgetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fgetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fgetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fgetea || defined __stub___fgetea
| choke me
| #endif
| 
| int
| main ()
| {
| return fgetea ();
|   ;
|   return 0;
| }
configure:17980: result: no
configure:17980: checking for flistea
configure:17980: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccC9qR74.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `flistea'
collect2: error: ld returned 1 exit status
configure:17980: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define flistea to an innocuous variant, in case <limits.h> declares flistea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define flistea innocuous_flistea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char flistea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef flistea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char flistea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_flistea || defined __stub___flistea
| choke me
| #endif
| 
| int
| main ()
| {
| return flistea ();
|   ;
|   return 0;
| }
configure:17980: result: no
configure:17980: checking for fsetea
configure:17980: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccCNkoc7.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `fsetea'
collect2: error: ld returned 1 exit status
configure:17980: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define fsetea to an innocuous variant, in case <limits.h> declares fsetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fsetea innocuous_fsetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fsetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fsetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fsetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fsetea || defined __stub___fsetea
| choke me
| #endif
| 
| int
| main ()
| {
| return fsetea ();
|   ;
|   return 0;
| }
configure:17980: result: no
configure:17980: checking for getea
configure:17980: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccJ5ngD1.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `getea'
collect2: error: ld returned 1 exit status
configure:17980: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define getea to an innocuous variant, in case <limits.h> declares getea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getea innocuous_getea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getea || defined __stub___getea
| choke me
| #endif
| 
| int
| main ()
| {
| return getea ();
|   ;
|   return 0;
| }
configure:17980: result: no
configure:17992: checking for lgetea
configure:17992: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cca0EPY6.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `lgetea'
collect2: error: ld returned 1 exit status
configure:17992: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define lgetea to an innocuous variant, in case <limits.h> declares lgetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lgetea innocuous_lgetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lgetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lgetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lgetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lgetea || defined __stub___lgetea
| choke me
| #endif
| 
| int
| main ()
| {
| return lgetea ();
|   ;
|   return 0;
| }
configure:17992: result: no
configure:17992: checking for listea
configure:17992: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccbKhLZ9.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `listea'
collect2: error: ld returned 1 exit status
configure:17992: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define listea to an innocuous variant, in case <limits.h> declares listea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define listea innocuous_listea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char listea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef listea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char listea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_listea || defined __stub___listea
| choke me
| #endif
| 
| int
| main ()
| {
| return listea ();
|   ;
|   return 0;
| }
configure:17992: result: no
configure:17992: checking for llistea
configure:17992: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccSzYuGb.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `llistea'
collect2: error: ld returned 1 exit status
configure:17992: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define llistea to an innocuous variant, in case <limits.h> declares llistea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define llistea innocuous_llistea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char llistea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef llistea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char llistea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_llistea || defined __stub___llistea
| choke me
| #endif
| 
| int
| main ()
| {
| return llistea ();
|   ;
|   return 0;
| }
configure:17992: result: no
configure:17992: checking for lsetea
configure:17992: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc0Q122g.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `lsetea'
collect2: error: ld returned 1 exit status
configure:17992: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| /* Define lsetea to an innocuous variant, in case <limits.h> declares lsetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lsetea innocuous_lsetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lsetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lsetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lsetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lsetea || defined __stub___lsetea
| choke me
| #endif
| 
| int
| main ()
| {
| return lsetea ();
|   ;
|   return 0;
| }
configure:17992: result: no
configure:18001: checking whether EXTATTR_NAMESPACE_USER is declared
configure:18001: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:189:25: fatal error: sys/extattr.h: No such file or directory
compilation terminated.
configure:18001: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/extattr.h>
| 
| 
| int
| main ()
| {
| #ifndef EXTATTR_NAMESPACE_USER
| #ifdef __cplusplus
|   (void) EXTATTR_NAMESPACE_USER;
| #else
|   (void) EXTATTR_NAMESPACE_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18001: result: no
configure:18033: checking acl/libacl.h usability
configure:18033: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:24: fatal error: acl/libacl.h: No such file or directory
compilation terminated.
configure:18033: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <acl/libacl.h>
configure:18033: result: no
configure:18033: checking acl/libacl.h presence
configure:18033: /usr/bin/cc -E  conftest.c
conftest.c:189:24: fatal error: acl/libacl.h: No such file or directory
compilation terminated.
configure:18033: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <acl/libacl.h>
configure:18033: result: no
configure:18033: checking for acl/libacl.h
configure:18033: result: no
configure:18045: checking sys/acl.h usability
configure:18045: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18045: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/acl.h>
configure:18045: result: no
configure:18045: checking sys/acl.h presence
configure:18045: /usr/bin/cc -E  conftest.c
conftest.c:189:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18045: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
configure:18045: result: no
configure:18045: checking for sys/acl.h
configure:18045: result: no
configure:18055: checking for acl_get_file in -lacl
configure:18080: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lacl  -lz  >&5
/usr/bin/ld: cannot find -lacl
collect2: error: ld returned 1 exit status
configure:18080: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_file ();
| int
| main ()
| {
| return acl_get_file ();
|   ;
|   return 0;
| }
configure:18089: result: no
configure:18103: checking for acl_create_entry
configure:18103: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccVXX2Cw.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_create_entry'
collect2: error: ld returned 1 exit status
configure:18103: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_create_entry to an innocuous variant, in case <limits.h> declares acl_create_entry.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_create_entry innocuous_acl_create_entry
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_create_entry (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_create_entry
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_create_entry ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_create_entry || defined __stub___acl_create_entry
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_create_entry ();
|   ;
|   return 0;
| }
configure:18103: result: no
configure:18103: checking for acl_get_fd_np
configure:18103: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccN2eeFz.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get_fd_np'
collect2: error: ld returned 1 exit status
configure:18103: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_fd_np to an innocuous variant, in case <limits.h> declares acl_get_fd_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_fd_np innocuous_acl_get_fd_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_fd_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_fd_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_fd_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_fd_np || defined __stub___acl_get_fd_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_fd_np ();
|   ;
|   return 0;
| }
configure:18103: result: no
configure:18115: checking for acl_init
configure:18115: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cctIaE9D.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_init'
collect2: error: ld returned 1 exit status
configure:18115: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_init to an innocuous variant, in case <limits.h> declares acl_init.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_init innocuous_acl_init
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_init (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_init
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_init ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_init || defined __stub___acl_init
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_init ();
|   ;
|   return 0;
| }
configure:18115: result: no
configure:18115: checking for acl_set_fd
configure:18115: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccgUVhcH.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_set_fd'
collect2: error: ld returned 1 exit status
configure:18115: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_fd to an innocuous variant, in case <limits.h> declares acl_set_fd.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_fd innocuous_acl_set_fd
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_fd (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_fd
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_fd ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_fd || defined __stub___acl_set_fd
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_fd ();
|   ;
|   return 0;
| }
configure:18115: result: no
configure:18115: checking for acl_set_fd_np
configure:18115: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc00Tg0H.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_set_fd_np'
collect2: error: ld returned 1 exit status
configure:18115: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_fd_np to an innocuous variant, in case <limits.h> declares acl_set_fd_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_fd_np innocuous_acl_set_fd_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_fd_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_fd_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_fd_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_fd_np || defined __stub___acl_set_fd_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_fd_np ();
|   ;
|   return 0;
| }
configure:18115: result: no
configure:18115: checking for acl_set_file
configure:18115: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccWiJY0K.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_set_file'
collect2: error: ld returned 1 exit status
configure:18115: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_file to an innocuous variant, in case <limits.h> declares acl_set_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_file innocuous_acl_set_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_file || defined __stub___acl_set_file
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_file ();
|   ;
|   return 0;
| }
configure:18115: result: no
configure:18125: checking for acl_permset_t
configure:18125: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c: In function 'main':
conftest.c:200:13: error: 'acl_permset_t' undeclared (first use in this function)
 if (sizeof (acl_permset_t))
             ^
conftest.c:200:13: note: each undeclared identifier is reported only once for each function it appears in
configure:18125: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#if HAVE_SYS_ACL_H
| 	#include <sys/acl.h>
| 	#endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_permset_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18125: result: no
configure:18152: checking for acl_get_perm_np
configure:18152: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccu9RLjT.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get_perm_np'
collect2: error: ld returned 1 exit status
configure:18152: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_perm_np to an innocuous variant, in case <limits.h> declares acl_get_perm_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_perm_np innocuous_acl_get_perm_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_perm_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_perm_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_perm_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_perm_np || defined __stub___acl_get_perm_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_perm_np ();
|   ;
|   return 0;
| }
configure:18152: result: no
configure:18152: checking for acl_get_perm
configure:18152: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccjk5ZpW.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get_perm'
collect2: error: ld returned 1 exit status
configure:18152: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_perm to an innocuous variant, in case <limits.h> declares acl_get_perm.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_perm innocuous_acl_get_perm
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_perm (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_perm
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_perm ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_perm || defined __stub___acl_get_perm
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_perm ();
|   ;
|   return 0;
| }
configure:18152: result: no
configure:18152: checking for acl_get_link
configure:18152: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccIoM4dX.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get_link'
collect2: error: ld returned 1 exit status
configure:18152: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_link to an innocuous variant, in case <limits.h> declares acl_get_link.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_link innocuous_acl_get_link
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_link (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_link
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_link ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_link || defined __stub___acl_get_link
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_link ();
|   ;
|   return 0;
| }
configure:18152: result: no
configure:18152: checking for acl_get_link_np
configure:18152: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc6nvlf0.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get_link_np'
collect2: error: ld returned 1 exit status
configure:18152: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_link_np to an innocuous variant, in case <limits.h> declares acl_get_link_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_link_np innocuous_acl_get_link_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_link_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_link_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_link_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_link_np || defined __stub___acl_get_link_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_link_np ();
|   ;
|   return 0;
| }
configure:18152: result: no
configure:18165: checking for acl_is_trivial_np
configure:18165: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccKshII6.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_is_trivial_np'
collect2: error: ld returned 1 exit status
configure:18165: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_is_trivial_np to an innocuous variant, in case <limits.h> declares acl_is_trivial_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_is_trivial_np innocuous_acl_is_trivial_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_is_trivial_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_is_trivial_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_is_trivial_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_is_trivial_np || defined __stub___acl_is_trivial_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_is_trivial_np ();
|   ;
|   return 0;
| }
configure:18165: result: no
configure:18176: checking whether ACL_TYPE_NFS4 is declared
configure:18176: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:189:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18176: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
| 
| int
| main ()
| {
| #ifndef ACL_TYPE_NFS4
| #ifdef __cplusplus
|   (void) ACL_TYPE_NFS4;
| #else
|   (void) ACL_TYPE_NFS4;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18176: result: no
configure:18187: checking whether ACL_USER is declared
configure:18187: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:189:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18187: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
| 
| int
| main ()
| {
| #ifndef ACL_USER
| #ifdef __cplusplus
|   (void) ACL_USER;
| #else
|   (void) ACL_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18187: result: no
configure:18197: checking whether ACL_TYPE_EXTENDED is declared
configure:18197: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:190:23: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18197: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/types.h>
| 		#include <sys/acl.h>
| 
| int
| main ()
| {
| #ifndef ACL_TYPE_EXTENDED
| #ifdef __cplusplus
|   (void) ACL_TYPE_EXTENDED;
| #else
|   (void) ACL_TYPE_EXTENDED;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18197: result: no
configure:18208: checking for acl_get in -lsec
configure:18233: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lsec  -lz  >&5
/usr/bin/ld: cannot find -lsec
collect2: error: ld returned 1 exit status
configure:18233: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get ();
| int
| main ()
| {
| return acl_get ();
|   ;
|   return 0;
| }
configure:18242: result: no
configure:18253: checking for aclent_t
configure:18253: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:189:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18253: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
| 
| int
| main ()
| {
| if (sizeof (aclent_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18253: result: no
configure:18264: checking for ace_t
configure:18264: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:189:21: fatal error: sys/acl.h: No such file or directory
compilation terminated.
configure:18264: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
| 
| int
| main ()
| {
| if (sizeof (ace_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18264: result: no
configure:18278: checking for acl_get
configure:18278: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccVkAL1c.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_get'
collect2: error: ld returned 1 exit status
configure:18278: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get to an innocuous variant, in case <limits.h> declares acl_get.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get innocuous_acl_get
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get || defined __stub___acl_get
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get ();
|   ;
|   return 0;
| }
configure:18278: result: no
configure:18278: checking for facl_get
configure:18278: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cceaOWSf.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `facl_get'
collect2: error: ld returned 1 exit status
configure:18278: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define facl_get to an innocuous variant, in case <limits.h> declares facl_get.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define facl_get innocuous_facl_get
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char facl_get (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef facl_get
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char facl_get ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_facl_get || defined __stub___facl_get
| choke me
| #endif
| 
| int
| main ()
| {
| return facl_get ();
|   ;
|   return 0;
| }
configure:18278: result: no
configure:18278: checking for acl_set
configure:18278: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/cc8YoTPh.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `acl_set'
collect2: error: ld returned 1 exit status
configure:18278: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set to an innocuous variant, in case <limits.h> declares acl_set.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set innocuous_acl_set
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set || defined __stub___acl_set
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set ();
|   ;
|   return 0;
| }
configure:18278: result: no
configure:18278: checking for facl_set
configure:18278: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lz  >&5
/tmp/ccNVxz5m.o: In function `main':
conftest.c:(.text+0xa): undefined reference to `facl_set'
collect2: error: ld returned 1 exit status
configure:18278: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define facl_set to an innocuous variant, in case <limits.h> declares facl_set.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define facl_set innocuous_facl_set
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char facl_set (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef facl_set
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char facl_set ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_facl_set || defined __stub___facl_set
| choke me
| #endif
| 
| int
| main ()
| {
| return facl_set ();
|   ;
|   return 0;
| }
configure:18278: result: no
configure:18297: checking for special C compiler options needed for large files
configure:18342: result: no
configure:18348: checking for _FILE_OFFSET_BITS value needed for large files
configure:18373: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
configure:18373: $? = 0
configure:18405: result: no
configure:18504: checking support for ARCHIVE_CRYPTO_MD5_LIBC
configure:18526: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:61:17: fatal error: md5.h: No such file or directory
compilation terminated.
configure:18526: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18536: result: no
configure:18550: checking support for ARCHIVE_CRYPTO_MD5_LIBSYSTEM
configure:18572: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
compilation terminated.
configure:18572: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18582: result: no
configure:18596: checking support for ARCHIVE_CRYPTO_RMD160_LIBC
configure:18618: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:64:20: fatal error: rmd160.h: No such file or directory
compilation terminated.
configure:18618: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18628: result: no
configure:18642: checking support for ARCHIVE_CRYPTO_SHA1_LIBC
configure:18664: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:67:18: fatal error: sha1.h: No such file or directory
compilation terminated.
configure:18664: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18674: result: no
configure:18688: checking support for ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
configure:18710: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
compilation terminated.
configure:18710: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18720: result: no
configure:18734: checking support for ARCHIVE_CRYPTO_SHA256_LIBC
configure:18756: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:18756: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18766: result: no
configure:18780: checking support for ARCHIVE_CRYPTO_SHA256_LIBC2
configure:18802: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:18802: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18812: result: no
configure:18826: checking support for ARCHIVE_CRYPTO_SHA256_LIBC3
configure:18848: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:18848: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18858: result: no
configure:18872: checking support for ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
configure:18894: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
compilation terminated.
configure:18894: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18904: result: no
configure:18918: checking support for ARCHIVE_CRYPTO_SHA384_LIBC
configure:18940: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:18940: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18950: result: no
configure:18964: checking support for ARCHIVE_CRYPTO_SHA384_LIBC2
configure:18986: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:18986: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18996: result: no
configure:19010: checking support for ARCHIVE_CRYPTO_SHA384_LIBC3
configure:19032: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:19032: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19042: result: no
configure:19056: checking support for ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
configure:19078: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
compilation terminated.
configure:19078: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19088: result: no
configure:19102: checking support for ARCHIVE_CRYPTO_SHA512_LIBC
configure:19124: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:19124: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19134: result: no
configure:19148: checking support for ARCHIVE_CRYPTO_SHA512_LIBC2
configure:19170: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:19170: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19180: result: no
configure:19194: checking support for ARCHIVE_CRYPTO_SHA512_LIBC3
configure:19216: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:78:18: fatal error: sha2.h: No such file or directory
compilation terminated.
configure:19216: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19226: result: no
configure:19240: checking support for ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
configure:19262: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
compilation terminated.
configure:19262: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19272: result: no
configure:20189: checking md5.h usability
configure:20189: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:17: fatal error: md5.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <md5.h>
configure:20189: result: no
configure:20189: checking md5.h presence
configure:20189: /usr/bin/cc -E  conftest.c
conftest.c:189:17: fatal error: md5.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <md5.h>
configure:20189: result: no
configure:20189: checking for md5.h
configure:20189: result: no
configure:20189: checking ripemd.h usability
configure:20189: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:20: fatal error: ripemd.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ripemd.h>
configure:20189: result: no
configure:20189: checking ripemd.h presence
configure:20189: /usr/bin/cc -E  conftest.c
conftest.c:189:20: fatal error: ripemd.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <ripemd.h>
configure:20189: result: no
configure:20189: checking for ripemd.h
configure:20189: result: no
configure:20189: checking sha.h usability
configure:20189: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:17: fatal error: sha.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha.h>
configure:20189: result: no
configure:20189: checking sha.h presence
configure:20189: /usr/bin/cc -E  conftest.c
conftest.c:189:17: fatal error: sha.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sha.h>
configure:20189: result: no
configure:20189: checking for sha.h
configure:20189: result: no
configure:20189: checking sha256.h usability
configure:20189: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:20: fatal error: sha256.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha256.h>
configure:20189: result: no
configure:20189: checking sha256.h presence
configure:20189: /usr/bin/cc -E  conftest.c
conftest.c:189:20: fatal error: sha256.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sha256.h>
configure:20189: result: no
configure:20189: checking for sha256.h
configure:20189: result: no
configure:20189: checking sha512.h usability
configure:20189: /usr/bin/cc -c  -Wall -Wformat -Wformat-security  conftest.c >&5
conftest.c:222:20: fatal error: sha512.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha512.h>
configure:20189: result: no
configure:20189: checking sha512.h presence
configure:20189: /usr/bin/cc -E  conftest.c
conftest.c:189:20: fatal error: sha512.h: No such file or directory
compilation terminated.
configure:20189: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sha512.h>
configure:20189: result: no
configure:20189: checking for sha512.h
configure:20189: result: no
configure:20200: checking for MD5Init in -lmd
configure:20225: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security   conftest.c -lmd  -lz  >&5
/usr/bin/ld: cannot find -lmd
collect2: error: ld returned 1 exit status
configure:20225: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char MD5Init ();
| int
| main ()
| {
| return MD5Init ();
|   ;
|   return 0;
| }
configure:20234: result: no
configure:20250: checking support for ARCHIVE_CRYPTO_MD5_LIBMD
configure:20272: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:91:17: fatal error: md5.h: No such file or directory
compilation terminated.
configure:20272: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20282: result: no
configure:20296: checking support for ARCHIVE_CRYPTO_RMD160_LIBMD
configure:20318: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:94:20: fatal error: ripemd.h: No such file or directory
compilation terminated.
configure:20318: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20328: result: no
configure:20342: checking support for ARCHIVE_CRYPTO_SHA1_LIBMD
configure:20364: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:97:17: fatal error: sha.h: No such file or directory
compilation terminated.
configure:20364: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20374: result: no
configure:20388: checking support for ARCHIVE_CRYPTO_SHA256_LIBMD
configure:20410: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:100:20: fatal error: sha256.h: No such file or directory
compilation terminated.
configure:20410: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20420: result: no
configure:20434: checking support for ARCHIVE_CRYPTO_SHA512_LIBMD
configure:20456: /usr/bin/cc -o conftest  -Wall -Wformat -Wformat-security  -I. -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL -I/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive  conftest.c -lz  >&5
In file included from conftest.c:224:0:
/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/libarchive/archive_digest_private.h:103:20: fatal error: sha512.h: No such file or directory
compilation terminated.
configure:20456: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.3.1"
| #define PACKAGE_STRING "libarchive 3.3.1"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.3.1"
| #define LIBARCHIVE_VERSION_STRING "3.3.1"
| #define LIBARCHIVE_VERSION_NUMBER "3003001"
| #define BSDCPIO_VERSION_STRING "3.3.1"
| #define BSDTAR_VERSION_STRING "3.3.1"
| #define BSDCAT_VERSION_STRING "3.3.1"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_DIRFD 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20466: result: no
configure:20787: checking that generated files are newer than configure
configure:20793: result: done
configure:20852: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libarchive config.status 3.3.1, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on ian

config.status:1293: creating Makefile
config.status:1293: creating build/pkgconfig/libarchive.pc
config.status:1293: creating config.h
config.status:1507: executing depfiles commands
config.status:1507: executing libtool commands
config.status:1507: executing mkdirs commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-pc-linux-gnu
ac_cv_c_compiler_gnu=yes
ac_cv_c_const=yes
ac_cv_c_int16_t=yes
ac_cv_c_int32_t=yes
ac_cv_c_int64_t=yes
ac_cv_c_uint16_t=yes
ac_cv_c_uint32_t=yes
ac_cv_c_uint64_t=yes
ac_cv_c_uint8_t=yes
ac_cv_env_CC_set=set
ac_cv_env_CC_value=/usr/bin/cc
ac_cv_env_CFLAGS_set=set
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=set
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=set
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LIBXML2_PC_CFLAGS_set=
ac_cv_env_LIBXML2_PC_CFLAGS_value=
ac_cv_env_LIBXML2_PC_LIBS_set=
ac_cv_env_LIBXML2_PC_LIBS_value=
ac_cv_env_LT_SYS_LIBRARY_PATH_set=
ac_cv_env_LT_SYS_LIBRARY_PATH_value=
ac_cv_env_PKG_CONFIG_LIBDIR_set=
ac_cv_env_PKG_CONFIG_LIBDIR_value=
ac_cv_env_PKG_CONFIG_PATH_set=
ac_cv_env_PKG_CONFIG_PATH_value=
ac_cv_env_PKG_CONFIG_set=
ac_cv_env_PKG_CONFIG_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_func_CreateHardLinkA=no
ac_cv_func__ctime64_s=no
ac_cv_func__doprnt=no
ac_cv_func__fseeki64=no
ac_cv_func__get_timezone=no
ac_cv_func__localtime64_s=no
ac_cv_func__mkgmtime64=no
ac_cv_func_acl_create_entry=no
ac_cv_func_acl_get=no
ac_cv_func_acl_get_fd_np=no
ac_cv_func_acl_get_link=no
ac_cv_func_acl_get_link_np=no
ac_cv_func_acl_get_perm=no
ac_cv_func_acl_get_perm_np=no
ac_cv_func_acl_init=no
ac_cv_func_acl_is_trivial_np=no
ac_cv_func_acl_set=no
ac_cv_func_acl_set_fd=no
ac_cv_func_acl_set_fd_np=no
ac_cv_func_acl_set_file=no
ac_cv_func_arc4random_buf=no
ac_cv_func_chflags=no
ac_cv_func_chown=yes
ac_cv_func_chroot=yes
ac_cv_func_ctime_r=yes
ac_cv_func_cygwin_conv_path=no
ac_cv_func_dirfd=yes
ac_cv_func_extattr_get_file=no
ac_cv_func_extattr_list_file=no
ac_cv_func_extattr_set_fd=no
ac_cv_func_extattr_set_file=no
ac_cv_func_facl_get=no
ac_cv_func_facl_set=no
ac_cv_func_fchdir=yes
ac_cv_func_fchflags=no
ac_cv_func_fchmod=yes
ac_cv_func_fchown=yes
ac_cv_func_fcntl=yes
ac_cv_func_fdopendir=yes
ac_cv_func_fgetea=no
ac_cv_func_fgetxattr=yes
ac_cv_func_flistea=no
ac_cv_func_flistxattr=yes
ac_cv_func_fork=yes
ac_cv_func_fsetea=no
ac_cv_func_fsetxattr=yes
ac_cv_func_fstat=yes
ac_cv_func_fstatat=yes
ac_cv_func_fstatfs=yes
ac_cv_func_fstatvfs=yes
ac_cv_func_ftruncate=yes
ac_cv_func_futimens=yes
ac_cv_func_futimes=yes
ac_cv_func_futimesat=yes
ac_cv_func_getea=no
ac_cv_func_geteuid=yes
ac_cv_func_getgrgid_r=yes
ac_cv_func_getgrnam_r=yes
ac_cv_func_getpid=yes
ac_cv_func_getpwnam_r=yes
ac_cv_func_getpwuid_r=yes
ac_cv_func_getvfsbyname=no
ac_cv_func_getxattr=yes
ac_cv_func_gmtime_r=yes
ac_cv_func_lchflags=no
ac_cv_func_lchmod=no
ac_cv_func_lchown=yes
ac_cv_func_lgetea=no
ac_cv_func_lgetxattr=yes
ac_cv_func_link=yes
ac_cv_func_listea=no
ac_cv_func_listxattr=yes
ac_cv_func_llistea=no
ac_cv_func_llistxattr=yes
ac_cv_func_localtime_r=yes
ac_cv_func_lsetea=no
ac_cv_func_lsetxattr=yes
ac_cv_func_lstat=yes
ac_cv_func_lstat_dereferences_slashed_symlink=yes
ac_cv_func_lstat_empty_string_bug=no
ac_cv_func_lutimes=yes
ac_cv_func_mbrtowc=yes
ac_cv_func_memcmp_working=yes
ac_cv_func_memmove=yes
ac_cv_func_memset=yes
ac_cv_func_mkdir=yes
ac_cv_func_mkfifo=yes
ac_cv_func_mknod=yes
ac_cv_func_mkstemp=yes
ac_cv_func_nl_langinfo=yes
ac_cv_func_openat=yes
ac_cv_func_pipe=yes
ac_cv_func_poll=yes
ac_cv_func_posix_spawnp=yes
ac_cv_func_readlink=yes
ac_cv_func_readlinkat=yes
ac_cv_func_readpassphrase=no
ac_cv_func_regcomp=yes
ac_cv_func_select=yes
ac_cv_func_setenv=yes
ac_cv_func_setlocale=yes
ac_cv_func_sigaction=yes
ac_cv_func_stat_empty_string_bug=no
ac_cv_func_statfs=yes
ac_cv_func_statvfs=yes
ac_cv_func_strchr=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strerror_r=yes
ac_cv_func_strerror_r_char_p=yes
ac_cv_func_strftime=yes
ac_cv_func_strncpy_s=no
ac_cv_func_strrchr=yes
ac_cv_func_symlink=yes
ac_cv_func_timegm=yes
ac_cv_func_tzset=yes
ac_cv_func_unsetenv=yes
ac_cv_func_utime=yes
ac_cv_func_utimensat=yes
ac_cv_func_utimes=yes
ac_cv_func_vfork=yes
ac_cv_func_vprintf=yes
ac_cv_func_wcrtomb=yes
ac_cv_func_wcscmp=yes
ac_cv_func_wcscpy=yes
ac_cv_func_wcslen=yes
ac_cv_func_wctomb=yes
ac_cv_func_wmemcmp=yes
ac_cv_func_wmemcpy=yes
ac_cv_func_wmemmove=yes
ac_cv_have_decl_ACL_TYPE_EXTENDED=no
ac_cv_have_decl_ACL_TYPE_NFS4=no
ac_cv_have_decl_ACL_USER=no
ac_cv_have_decl_D_MD_ORDER=no
ac_cv_have_decl_EFTYPE=no
ac_cv_have_decl_EILSEQ=yes
ac_cv_have_decl_EXT2_IOC_GETFLAGS=no
ac_cv_have_decl_EXTATTR_NAMESPACE_USER=no
ac_cv_have_decl_FS_IOC_GETFLAGS=yes
ac_cv_have_decl_INT32_MAX=yes
ac_cv_have_decl_INT32_MIN=yes
ac_cv_have_decl_INT64_MAX=yes
ac_cv_have_decl_INT64_MIN=yes
ac_cv_have_decl_INTMAX_MAX=yes
ac_cv_have_decl_INTMAX_MIN=yes
ac_cv_have_decl_SIZE_MAX=yes
ac_cv_have_decl_SSIZE_MAX=yes
ac_cv_have_decl_UINT32_MAX=yes
ac_cv_have_decl_UINT64_MAX=yes
ac_cv_have_decl_UINTMAX_MAX=yes
ac_cv_have_decl_strerror_r=yes
ac_cv_header_Bcrypt_h=no
ac_cv_header_acl_libacl_h=no
ac_cv_header_attr_xattr_h=no
ac_cv_header_copyfile_h=no
ac_cv_header_ctype_h=yes
ac_cv_header_dirent_dirent_h=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_errno_h=yes
ac_cv_header_ext2fs_ext2_fs_h=no
ac_cv_header_fcntl_h=yes
ac_cv_header_grp_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_io_h=no
ac_cv_header_langinfo_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_linux_fiemap_h=yes
ac_cv_header_linux_fs_h=yes
ac_cv_header_linux_magic_h=yes
ac_cv_header_linux_types_h=yes
ac_cv_header_locale_h=yes
ac_cv_header_md5_h=no
ac_cv_header_memory_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_paths_h=yes
ac_cv_header_poll_h=yes
ac_cv_header_pthread_h=yes
ac_cv_header_pwd_h=yes
ac_cv_header_readpassphrase_h=no
ac_cv_header_regex_h=yes
ac_cv_header_ripemd_h=no
ac_cv_header_sha256_h=no
ac_cv_header_sha512_h=no
ac_cv_header_sha_h=no
ac_cv_header_signal_h=yes
ac_cv_header_spawn_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_acl_h=no
ac_cv_header_sys_cdefs_h=yes
ac_cv_header_sys_ea_h=no
ac_cv_header_sys_extattr_h=no
ac_cv_header_sys_ioctl_h=yes
ac_cv_header_sys_mkdev_h=no
ac_cv_header_sys_mount_h=yes
ac_cv_header_sys_param_h=yes
ac_cv_header_sys_poll_h=yes
ac_cv_header_sys_select_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_statfs_h=yes
ac_cv_header_sys_statvfs_h=yes
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_types_h_makedev=yes
ac_cv_header_sys_utime_h=no
ac_cv_header_sys_utsname_h=yes
ac_cv_header_sys_vfs_h=yes
ac_cv_header_sys_wait_h=yes
ac_cv_header_sys_xattr_h=yes
ac_cv_header_time=yes
ac_cv_header_time_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_utime_h=yes
ac_cv_header_wchar_h=yes
ac_cv_header_wctype_h=yes
ac_cv_header_wincrypt_h=no
ac_cv_header_windows_h=no
ac_cv_header_winioctl_h=no
ac_cv_header_zlib_h=yes
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_lib_acl_acl_get_file=no
ac_cv_lib_md_MD5Init=no
ac_cv_lib_sec_acl_get=no
ac_cv_lib_z_inflate=yes
ac_cv_member_struct_dirent_d_namlen=no
ac_cv_member_struct_stat_st_birthtime=no
ac_cv_member_struct_stat_st_birthtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_blksize=yes
ac_cv_member_struct_stat_st_flags=no
ac_cv_member_struct_stat_st_mtim_tv_nsec=yes
ac_cv_member_struct_stat_st_mtime_n=no
ac_cv_member_struct_stat_st_mtime_usec=no
ac_cv_member_struct_stat_st_mtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_umtime=no
ac_cv_member_struct_statfs_f_namemax=no
ac_cv_member_struct_statvfs_f_iosize=no
ac_cv_member_struct_tm___tm_gmtoff=no
ac_cv_member_struct_tm_tm_gmtoff=yes
ac_cv_objext=o
ac_cv_path_EGREP='/bin/grep -E'
ac_cv_path_FGREP='/bin/grep -F'
ac_cv_path_GREP=/bin/grep
ac_cv_path_SED=/bin/sed
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_lt_DD=/bin/dd
ac_cv_path_mkdir=/bin/mkdir
ac_cv_prog_AWK=gawk
ac_cv_prog_CPP='/usr/bin/cc -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=/usr/bin/cc
ac_cv_prog_ac_ct_DLLTOOL=dlltool
ac_cv_prog_ac_ct_MANIFEST_TOOL=mt
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_g=yes
ac_cv_prog_gcc_traditional=no
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_opendir='none required'
ac_cv_search_setxattr='none required'
ac_cv_sizeof_wchar_t=4
ac_cv_sys_file_offset_bits=no
ac_cv_sys_largefile_CC=no
ac_cv_sys_largefile_source=no
ac_cv_type_ace_t=no
ac_cv_type_acl_permset_t=no
ac_cv_type_aclent_t=no
ac_cv_type_id_t=yes
ac_cv_type_intmax_t=yes
ac_cv_type_long_long_int=yes
ac_cv_type_mode_t=yes
ac_cv_type_off_t=yes
ac_cv_type_size_t=yes
ac_cv_type_struct_vfsconf=no
ac_cv_type_struct_xvfsconf=no
ac_cv_type_uintmax_t=yes
ac_cv_type_uintptr_t=yes
ac_cv_type_unsigned_long_long=yes
ac_cv_type_unsigned_long_long_int=yes
ac_cv_type_wchar_t=yes
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_make_support_nested_variables=yes
am_cv_prog_cc_c_o=yes
ax_cv_check_cflags___Wall=yes
ax_cv_check_cflags___Wformat=yes
ax_cv_check_cflags___Wformat_security=yes
la_cv_type_uid_t=yes
lt_cv_ar_at_file=@
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/usr/bin/ld
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic='-fPIC -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_rtti_exceptions=no
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_gnu_ld=yes
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_shlibpath_overrides_runpath=no
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'' | sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(lib.*\)$/  {"\1", (void *) \&\1},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"lib\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_import=
lt_cv_sys_max_cmd_len=1572864
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
lt_cv_truncate_bin='/bin/dd bs=4096 count=1'

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/missing aclocal-1.15'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='0'
AM_V='$(V)'
AR='ar'
ARCHIVE_LIBTOOL_VERSION='16:1:3'
AS='as'
AUTOCONF='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/missing autoconf'
AUTOHEADER='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/missing autoheader'
AUTOMAKE='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/missing automake-1.15'
AWK='gawk'
BSDCAT_VERSION_STRING='3.3.1'
BSDCPIO_VERSION_STRING='3.3.1'
BSDTAR_VERSION_STRING='3.3.1'
BUILD_BSDCAT_FALSE=''
BUILD_BSDCAT_TRUE='#'
BUILD_BSDCPIO_FALSE=''
BUILD_BSDCPIO_TRUE='#'
BUILD_BSDTAR_FALSE=''
BUILD_BSDTAR_TRUE='#'
CC='/usr/bin/cc'
CCDEPMODE='depmode=gcc3'
CFLAGS=' -Wall -Wformat -Wformat-security'
CPP='/usr/bin/cc -E'
CPPFLAGS=''
CYGPATH_W='echo'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='dlltool'
DSYMUTIL=''
DUMPBIN=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/bin/grep -E'
EXEEXT=''
FGREP='/bin/grep -F'
GREP='/bin/grep'
INC_CYGWIN_FILES_FALSE=''
INC_CYGWIN_FILES_TRUE='#'
INC_WINDOWS_FILES_FALSE=''
INC_WINDOWS_FILES_TRUE='#'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/usr/bin/ld -m elf_x86_64'
LDFLAGS=''
LIBARCHIVE_VERSION_NUMBER='3003001'
LIBARCHIVE_VERSION_STRING='3.3.1'
LIBICONV=''
LIBOBJS=''
LIBS='-lz '
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIBXML2_PC_CFLAGS=''
LIBXML2_PC_LIBS=''
LIPO=''
LN_S='ln -s'
LTLIBICONV=''
LTLIBOBJS=''
LT_SYS_LIBRARY_PATH=''
MAINT=''
MAINTAINER_MODE_FALSE='#'
MAINTAINER_MODE_TRUE=''
MAKEINFO='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/missing makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='/bin/mkdir -p'
NM='/usr/bin/nm -B'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='o'
OTOOL64=''
OTOOL=''
PACKAGE='libarchive'
PACKAGE_BUGREPORT='libarchive-discuss@googlegroups.com'
PACKAGE_NAME='libarchive'
PACKAGE_STRING='libarchive 3.3.1'
PACKAGE_TARNAME='libarchive'
PACKAGE_URL=''
PACKAGE_VERSION='3.3.1'
PATH_SEPARATOR=':'
PKG_CONFIG=''
PKG_CONFIG_LIBDIR=''
PKG_CONFIG_PATH=''
PLATFORMCPPFLAGS=''
RANLIB='ranlib'
SED='/bin/sed'
SET_MAKE=''
SHELL='/bin/bash'
STATIC_BSDCAT_FALSE=''
STATIC_BSDCAT_TRUE='#'
STATIC_BSDCPIO_FALSE=''
STATIC_BSDCPIO_TRUE='#'
STATIC_BSDTAR_FALSE=''
STATIC_BSDTAR_TRUE='#'
STRIP='strip'
VERSION='3.3.1'
ac_ct_AR='ar'
ac_ct_CC='/usr/bin/cc'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__include='include'
am__isrc=' -I$(srcdir)'
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='x86_64-pc-linux-gnu'
host_alias=''
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/src/libarchive-EXTERNAL/build/autoconf/install-sh'
libdir='/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/home/camilo/Coding/qml/nx-software-center/build/AppImageKit-prefix/src/AppImageKit-build/lib/libappimage/libarchive-EXTERNAL-prefix'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "libarchive"
#define PACKAGE_TARNAME "libarchive"
#define PACKAGE_VERSION "3.3.1"
#define PACKAGE_STRING "libarchive 3.3.1"
#define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
#define PACKAGE_URL ""
#define PACKAGE "libarchive"
#define VERSION "3.3.1"
#define LIBARCHIVE_VERSION_STRING "3.3.1"
#define LIBARCHIVE_VERSION_NUMBER "3003001"
#define BSDCPIO_VERSION_STRING "3.3.1"
#define BSDTAR_VERSION_STRING "3.3.1"
#define BSDCAT_VERSION_STRING "3.3.1"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define __EXTENSIONS__ 1
#define _ALL_SOURCE 1
#define _GNU_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define _TANDEM_SOURCE 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define HAVE_DIRENT_H 1
#define HAVE_SYS_WAIT_H 1
#define HAVE_CTYPE_H 1
#define HAVE_ERRNO_H 1
#define HAVE_FCNTL_H 1
#define HAVE_GRP_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LANGINFO_H 1
#define HAVE_LIMITS_H 1
#define HAVE_LINUX_FIEMAP_H 1
#define HAVE_LINUX_FS_H 1
#define HAVE_LINUX_MAGIC_H 1
#define HAVE_LINUX_TYPES_H 1
#define HAVE_WORKING_FS_IOC_GETFLAGS 1
#define HAVE_LOCALE_H 1
#define HAVE_PATHS_H 1
#define HAVE_POLL_H 1
#define HAVE_PTHREAD_H 1
#define HAVE_PWD_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_SPAWN_H 1
#define HAVE_STDARG_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_CDEFS_H 1
#define HAVE_SYS_IOCTL_H 1
#define HAVE_SYS_MOUNT_H 1
#define HAVE_SYS_PARAM_H 1
#define HAVE_SYS_POLL_H 1
#define HAVE_SYS_SELECT_H 1
#define HAVE_SYS_STATFS_H 1
#define HAVE_SYS_STATVFS_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_UTSNAME_H 1
#define HAVE_SYS_VFS_H 1
#define HAVE_TIME_H 1
#define HAVE_UNISTD_H 1
#define HAVE_UTIME_H 1
#define HAVE_WCHAR_H 1
#define HAVE_WCTYPE_H 1
#define HAVE_ZLIB_H 1
#define HAVE_LIBZ 1
#define HAVE_REGEX_H 1
#define HAVE_STRUCT_TM_TM_GMTOFF 1
#define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
#define HAVE_STRUCT_STAT_ST_BLKSIZE 1
#define HAVE_UINTMAX_T 1
#define HAVE_UNSIGNED_LONG_LONG 1
#define HAVE_UNSIGNED_LONG_LONG_INT 1
#define HAVE_LONG_LONG_INT 1
#define HAVE_INTMAX_T 1
#define HAVE_UINTMAX_T 1
#define HAVE_DECL_SIZE_MAX 1
#define HAVE_DECL_INT32_MAX 1
#define HAVE_DECL_INT32_MIN 1
#define HAVE_DECL_INT64_MAX 1
#define HAVE_DECL_INT64_MIN 1
#define HAVE_DECL_UINT64_MAX 1
#define HAVE_DECL_UINT32_MAX 1
#define HAVE_DECL_INTMAX_MAX 1
#define HAVE_DECL_INTMAX_MIN 1
#define HAVE_DECL_UINTMAX_MAX 1
#define HAVE_DECL_SSIZE_MAX 1
#define HAVE_EILSEQ 1
#define HAVE_WCHAR_T 1
#define SIZEOF_WCHAR_T 4
#define TIME_WITH_SYS_TIME 1
#define HAVE_FSEEKO 1
#define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
#define HAVE_DECL_STRERROR_R 1
#define HAVE_STRERROR_R 1
#define STRERROR_R_CHAR_P 1
#define HAVE_STRFTIME 1
#define HAVE_VPRINTF 1
#define HAVE_CHOWN 1
#define HAVE_CHROOT 1
#define HAVE_CTIME_R 1
#define HAVE_DIRFD 1
#define HAVE_FCHDIR 1
#define HAVE_FCHMOD 1
#define HAVE_FCHOWN 1
#define HAVE_FCNTL 1
#define HAVE_FDOPENDIR 1
#define HAVE_FORK 1
#define HAVE_FSTAT 1
#define HAVE_FSTATAT 1
#define HAVE_FSTATFS 1
#define HAVE_FSTATVFS 1
#define HAVE_FTRUNCATE 1
#define HAVE_FUTIMENS 1
#define HAVE_FUTIMES 1
#define HAVE_FUTIMESAT 1
#define HAVE_GETEUID 1
#define HAVE_GETPID 1
#define HAVE_GETGRGID_R 1
#define HAVE_GETGRNAM_R 1
#define HAVE_GETPWNAM_R 1
#define HAVE_GETPWUID_R 1
#define HAVE_GMTIME_R 1
#define HAVE_LCHOWN 1
#define HAVE_LINK 1
#define HAVE_LOCALTIME_R 1
#define HAVE_LSTAT 1
#define HAVE_LUTIMES 1
#define HAVE_MBRTOWC 1
#define HAVE_MEMMOVE 1
#define HAVE_MEMSET 1
#define HAVE_MKDIR 1
#define HAVE_MKFIFO 1
#define HAVE_MKNOD 1
#define HAVE_MKSTEMP 1
#define HAVE_NL_LANGINFO 1
#define HAVE_OPENAT 1
#define HAVE_PIPE 1
#define HAVE_POLL 1
#define HAVE_POSIX_SPAWNP 1
#define HAVE_READLINK 1
#define HAVE_READLINKAT 1
#define HAVE_SELECT 1
#define HAVE_SETENV 1
#define HAVE_SETLOCALE 1
#define HAVE_SIGACTION 1
#define HAVE_STATFS 1
#define HAVE_STATVFS 1
#define HAVE_STRCHR 1
#define HAVE_STRDUP 1
#define HAVE_STRERROR 1
#define HAVE_STRRCHR 1
#define HAVE_SYMLINK 1
#define HAVE_TIMEGM 1
#define HAVE_TZSET 1
#define HAVE_UNSETENV 1
#define HAVE_UTIME 1
#define HAVE_UTIMENSAT 1
#define HAVE_UTIMES 1
#define HAVE_VFORK 1
#define HAVE_WCRTOMB 1
#define HAVE_WCSCMP 1
#define HAVE_WCSCPY 1
#define HAVE_WCSLEN 1
#define HAVE_WCTOMB 1
#define HAVE_WMEMCMP 1
#define HAVE_WMEMCPY 1
#define HAVE_WMEMMOVE 1
#define HAVE_READDIR_R 1
#define HAVE_SYS_XATTR_H 1
#define HAVE_FGETXATTR 1
#define HAVE_FLISTXATTR 1
#define HAVE_FSETXATTR 1
#define HAVE_GETXATTR 1
#define HAVE_LGETXATTR 1
#define HAVE_LISTXATTR 1
#define HAVE_LLISTXATTR 1
#define HAVE_LSETXATTR 1
#define HAVE_DECL_EXTATTR_NAMESPACE_USER 0

configure: exit 0
